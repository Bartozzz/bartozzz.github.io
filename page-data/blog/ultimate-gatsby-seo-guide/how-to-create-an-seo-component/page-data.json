{"componentChunkName":"component---src-templates-blog-post-tsx-content-file-path-content-blog-ultimate-gatsby-seo-guide-how-to-create-an-seo-component-md","path":"/blog/ultimate-gatsby-seo-guide/how-to-create-an-seo-component/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://laniewski.me"}}},"pageContext":{"data":{"id":"bdc34da5-64ce-5d46-a072-95239ffc5c0a","body":"\nOne way to enhance your Gatsby site’s SEO capabilities is by creating a custom SEO component for easy metadata tag management. In this blog post, we’ll explore the Head API and a step-by-step guide on creating a Gatsby SEO component.\n\n## What is the Gatsby Head API?\n\n[Gatsby Head API](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/) simplifies the process of managing the [document head](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head), where metadata such as title tags, meta descriptions, and other elements crucial for SEO are defined.\n\nTo use the Head API, you simply have to export a named function called `Head` from your pages (and templates used in `createPage`), as follows:\n\n```tsx\nexport function Head(props: HeadProps<DataType, PageContextType>) {\n  return (\n    <>\n      <title>…</title>\n      <meta name=\"keywords\" content=\"…\" />\n      <meta name=\"description\" content=\"…\" />\n    </>\n  );\n}\n```\n\nYou can read more about the Gatsby Head API in the official documentation [here](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/).\n\n## Step 1: Create a basic SEO component\n\nLet’s start by creating a new `components/SEO.tsx` component that will set basic metadata information in the document head:\n\n```tsx\ninterface SEOProps {\n  title: string;\n  description: string;\n}\n\nexport function SEO({ title, description }: React.PropsWithChildren<SEOProps>) {\n  return (\n    <>\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n\n      {children}\n    </>\n  );\n};\n```\n\nOur basic component accepts 3 properties:\n- `title`: the title of the page;\n- `description`: the description of the page;\n- `children`: any additional elements that should be included in the document head;\n\nWe can now use the component inside pages and templates, as follows:\n\n```tsx\nexport function Head() {\n  return (\n    <SEO title=\"Page title\" description=\"Page description\">\n      <html lang=\"en\" />\n    </SEO>\n  );\n}\n```\n\n<Newsletter />\n\n## Step 2: Add canonical links\n\nA canonical tag defines the main version for duplicate and similar pages. It tells search engines which version of a page they should index and rank (for example, to use https://example.com instead of https://www.example.com). To add canonical links, you can use the official Gatsby plugin called [`gatsby-plugin-canonical-urls`](https://www.gatsbyjs.com/plugins/gatsby-plugin-canonical-urls/). It works well for most cases.\n\nFor a more customizable approach, we can leverage the Head API and the `location` property to create custom canonical links. Let’s start by extending our SEO component with a `url` property:\n\n```tsx {4,10,18}\nimport { useStaticQuery, graphql } from \"gatsby\";\n\ninterface SEOProps {\n  url: string;\n  title: string;\n  description: string;\n}\n\nexport function SEO({\n  url,\n  title,\n  description,\n  children,\n}: React.PropsWithChildren<SEOProps>) {\n  return (\n    <>\n      <title>{title}</title>\n      <link rel=\"canonical\" href={url} />\n      <meta name=\"description\" content={description} />\n\n      {children}\n    </>\n  );\n}\n```\n\nThen, we can populate the `url` property in our pages and templates, as follows:\n\n```tsx\ninterface DataType {\n  site: {\n    siteMetadata: {\n      siteUrl: string;\n    };\n  };\n};\n\nexport function Head({ data, location }: HeadProps<DataType>) {\n  const siteUrl = data.site.siteMetadata.siteUrl;\n  const slug = location.pathname;\n\n  return (\n    <SEO\n      url={`${siteUrl}${slug}`}\n      title=\"Page title\"\n      description=\"Page description\"\n    />\n  );\n}\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`;\n```\n\n## Step 3: Add social sharing cards\n\nOpen Graph (OG) tags instruct social networks like Facebook, Pinterest, LinkedIn, and other platforms what information to display whenever a URL to your page is shared. The four required Open Graph tags for every page are:\n- `og:title`,\n- `og:type`,\n- `og:image`,\n- `og:url`.\n\nTwitter provides its variants of those tags. Basic Twitter cards include:\n- `twitter:card`,\n- `twitter:site`,\n- `twitter:title`,\n- `twitter:description`,\n- `twitter:image`.\n\nAccording to [Twitter Documentation](https://developer.twitter.com/en/docs/twitter-for-websites/cards/guides/getting-started), if some of these tags are missing, Twitter will pull data from relevant Open Graph tags.\n\n<Alert type=\"warning\">\n  Make sure the URL specified in `og:url` matches the URL of the canonical page unless you have a specific intent.\n</Alert>\n\n```tsx {7,14,17-25,27,35-42}\nimport { useStaticQuery, graphql } from \"gatsby\";\n\ninterface SEOProps {\n  url: string;\n  title: string;\n  description: string;\n  image?: string;\n}\n\nexport function SEO({\n  url,\n  title,\n  description,\n  image,\n  children,\n}: React.PropsWithChildren<SEOProps>) {\n  const { site } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  const metaImage = image || `${site.siteMetadata.siteUrl}/thumbnail.png`;\n\n  return (\n    <>\n      <title>{title}</title>\n      <link rel=\"canonical\" href={url} />\n      <meta name=\"description\" content={description} />\n\n      <meta name=\"og:url\" content={url} />\n      <meta name=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={metaImage} />\n      <meta name=\"og:title\" content={title} />\n      <meta name=\"og:description\" content={description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:creator\" content=\"@yourTwitterHandle\" />\n\n      {children}\n    </>\n  );\n}\n```\n\nUnfortunately, you cannot test Open Graph and Twitter cards locally, you need to deploy your changes so they are publicly accessible. Once deployed, you can post a link to your website in the [Facebook Debugger](https://developers.facebook.com/tools/debug) and Tweet Composer (in the Twitter client itself) to check that your cards render as expected.\n\n## Conclusion\n\nCreating a custom SEO component with Gatsby and the Head API is a straightforward process that significantly enhances your website’s search engine visibility. Managing metadata efficiently will empower you to create well-optimized pages that stand out in search engine rankings, ultimately driving more traffic to your website.\n","excerpt":"One way to enhance your Gatsby site’s SEO capabilities is by creating a custom SEO component for easy metadata tag management. In this blog post, we’ll…","tableOfContents":{"items":[{"url":"#what-is-the-gatsby-head-api","title":"What is the Gatsby Head API?"},{"url":"#step-1-create-a-basic-seo-component","title":"Step 1: Create a basic SEO component"},{"url":"#step-2-add-canonical-links","title":"Step 2: Add canonical links"},{"url":"#step-3-add-social-sharing-cards","title":"Step 3: Add social sharing cards"},{"url":"#conclusion","title":"Conclusion"}]},"fields":{"slug":"/blog/ultimate-gatsby-seo-guide/how-to-create-an-seo-component/","timeToRead":{"minutes":3.915,"words":783}},"frontmatter":{"title":"Ultimate Gatsby SEO Guide: How to create an SEO component?","authors":["Bartosz Łaniewski"],"keywords":["Gatsby","SEO"],"language":"en","description":null,"dateCreated":"December 15, 2023","dateCreatedMeta":"2023-12-15 18:10:00 +0100","dateUpdated":"December 25, 2023","dateUpdatedMeta":"2023-12-26 00:00:00 +0100","datePublished":"December 15, 2023","datePublishedMeta":"2023-12-15 18:10:00 +0100"},"internal":{"contentFilePath":"/home/runner/work/bartozzz.github.io/bartozzz.github.io/content/blog/ultimate-gatsby-seo-guide/how-to-create-an-seo-component.md"}},"frontmatter":{"title":"Ultimate Gatsby SEO Guide: How to create an SEO component?","authors":["Bartosz Łaniewski"],"keywords":["Gatsby","SEO"],"language":"en","dateCreated":"2023-12-15 18:10:00 +0100","dateUpdated":"2023-12-26 00:00:00 +0100","datePublished":"2023-12-15 18:10:00 +0100"}}},"staticQueryHashes":["1271460761","3216310583"],"slicesMap":{}}