{"componentChunkName":"component---src-templates-blog-post-tsx-content-file-path-content-blog-2023-11-19-api-response-validation-with-zod-index-md","path":"/blog/2023-11-19-api-response-validation-with-zod/","result":{"data":{"site":{"siteMetadata":{"title":"Bartosz Łaniewski","siteUrl":"https://laniewski.me"}}},"pageContext":{"data":{"id":"f49d0a2d-3925-5ae5-8320-57422f8b715f","excerpt":"When implementing applications, we often need to communicate with external services via APIs. In such cases, it’s crucial to ensure that the…","body":"\nWhen implementing applications, we often need to communicate with external services via APIs. In such cases, it's crucial to ensure that the data received from these APIs is valid and conforms to the expected format. It's essential for maintaining the integrity and functionality of various systems.\n\n## What is Zod\n\n[Zod](https://github.com/colinhacks/zod) is a TypeScript-first schema declaration and validation library. It provides an elegant and expressive syntax for defining data schemas and validating data against those schemas in the runtime. Here's a simple example using TypeScript:\n\n```ts\nimport { z } from 'zod';\n\nconst userSchema = z.object({\n  id: z.string().uuid(),\n  email: z.string().email(),\n  login: z.string(),\n  createdAt: z.string().datetime(),\n  deletedAt: z.string().datetime().nullable(),\n});\n\nconst userData = {\n  id: \"3f740a80-0af0-4976-9bad-db83b15c7bf7\",\n  email: \"jan.kowalski@example.com\",\n  login: \"jan.kowalski\",\n  createdAt: \"2020-01-01T00:00:00Z\",\n  deletedAt: null,\n};\n\ntry {\n  const validatedUser = userSchema.parse(userData);\n\n  console.log(validatedUser);\n} catch (error) {\n  console.error(error.errors);\n}\n```\n\nIn this example, `userSchema` defines a schema for user data, specifying the expected types and constraints for each field. The `parse` method is then used to validate the `userData` object against the schema. If validation fails, an error is thrown with details about the validation errors.\n\n## Why use Zod\n\n- **Type Safety:** Zod integrates seamlessly with TypeScript, providing strong type checking at compile-time. This helps to catch potential issues early in the development process.\n\n- **Error Reporting:** When validation fails in the run-time, Zod provides detailed error messages, including information about the specific fields that didn't pass validation. This aids in diagnosing and fixing issues efficiently.\n\n- **Readability and Expressiveness:** Zod's syntax is clean and expressive, making it easy to define and understand complex data structures. This enhances code readability and maintainability.\n\n- **Flexibility:** Zod allows you to create sophisticated validation rules, including custom validation functions, conditional validation, and more. This flexibility is valuable when dealing with diverse and evolving data structures.\n\n## How to use Zod\n\nIn a real application, I'd encourage to encapsulate the utilization of Zod within a generic helper function. Let's examine a refined implementation:\n\n```ts\n// api/validator.ts\nimport { z, ZodIssue } from \"zod\";\n\ninterface ValidateConfig<T extends z.ZodTypeAny> {\n  dto: unknown;\n  schema: T;\n  schemaName: string;\n}\n\nexport function validateSchema<T extends z.ZodTypeAny>(\n  config: ValidateConfig<T>\n): z.infer<T> {\n  const { data, success, error } = config.schema.safeParse(config.dto);\n\n  if (success) {\n    return data;\n  } else {\n    captureError(`API Validation Error: ${config.schemaName}`, {\n      dto: config.dto,\n      error: error.message,\n      issues: error.issues,\n    });\n\n    throw error;\n  }\n}\n\nfunction captureError(message: string, extra = {}): void {\n  if (__DEV__) {\n    console.error(message, extra);\n  } else {\n    // TODO: report to Sentry/something else\n  }\n}\n```\n\nThis helper function takes a data transfer object (DTO), a Zod schema, and a schema name as arguments. It then validates the DTO against the schema and returns the validated data if validation succeeds. If validation fails, it logs an error message and throws an error.\n\nWith such a function ready, we only have to define a schema for each API response and use the helper function to validate the response data. Here's an example of how that could look like:\n\n```ts\n// api/requests/v1/accountDetails/schema.ts\nimport { z } from \"zod\";\n\nexport const schema = z.object({\n  id: z.string().uuid(),\n  email: z.string().email(),\n  login: z.string(),\n  createdAt: z.string().datetime(),\n  deletedAt: z.string().datetime().nullable(),\n});\n```\n\n```ts\n// api/requests/v1/accountDetails/types.ts\nimport { z } from \"zod\";\nimport { schema } from \"./schema\";\n\nexport type AccountDetailsResponse = z.infer<typeof schema>;\nexport type AccountDetailsErrorResponse = Record<string, unknown>;\n```\n\n```ts {8-10}\n// api/requests/v1/accountDetails/request.ts\nimport { apiClient } from \"@/api/client\";\nimport { validateSchema } from \"@/api/validator\";\n\nimport { schema } from \"./schema\";\nimport { AccountDetailsResponse } from \"./types\";\n\nfunction validate(dto: unknown): AccountDetailsResponse {\n  return validateSchema({ dto, schema, schemaName: \"v1/account/details\" });\n}\n\nexport async function getAccountDetails(): Promise<AccountDetailsResponse> {\n  const response = await apiClient.get(\"/api/v1/account/details\");\n\n  return validate(response.data);\n}\n```\n\n## Conclusion\n\nAPI response validation is a critical aspect of building reliable and robust applications. Zod, with its TypeScript-first approach and expressive syntax, simplifies the process of defining and enforcing data schemas.\n\nBy incorporating Zod into your workflow, you can enhance the integrity of your APIs, catch potential issues early, and ensure that your application communicates seamlessly with external services.\n","tableOfContents":{"items":[{"url":"#what-is-zod","title":"What is Zod"},{"url":"#why-use-zod","title":"Why use Zod"},{"url":"#how-to-use-zod","title":"How to use Zod"},{"url":"#conclusion","title":"Conclusion"}]},"fields":{"slug":"/blog/2023-11-19-api-response-validation-with-zod/","timeToRead":{"minutes":3.33}},"frontmatter":{"dateCreated":"November 19, 2023","dateUpdated":"November 19, 2023","datePublished":"November 19, 2023","title":"API Response validation with Zod","authors":["Bartosz Łaniewski"],"language":"en","keywords":["JavaScript","TypeScript"],"description":null},"internal":{"contentFilePath":"/home/runner/work/bartozzz.github.io/bartozzz.github.io/content/blog/2023-11-19-api-response-validation-with-zod/index.md"}},"frontmatter":{"title":"API Response validation with Zod","authors":["Bartosz Łaniewski"],"keywords":["JavaScript","TypeScript"],"language":"en","dateCreated":"2023-11-20 00:00:00 +0100","dateUpdated":"2023-11-20 00:00:00 +0100","datePublished":"2023-11-20 00:00:00 +0100"}}},"staticQueryHashes":["3216310583","3764592887"],"slicesMap":{}}