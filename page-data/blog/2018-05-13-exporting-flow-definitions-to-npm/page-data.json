{"componentChunkName":"component---src-templates-blog-post-tsx-content-file-path-content-blog-2018-05-13-exporting-flow-definitions-to-npm-index-md","path":"/blog/2018-05-13-exporting-flow-definitions-to-npm/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://laniewski.me"}}},"pageContext":{"data":{"id":"afb5b5a2-7917-5f76-bc42-4912cf350058","body":"\nThere are more than [31000 repositories on GitHub](https://github.com/facebook/flow/network/dependents) using Flow but only a few export Flow definitions. In this article, we will see how to export Flow definitions for a module. Before getting started, I encourage you to read my previous article about „_[Publishing tree shaking friendly packages to npm](/blog/2018-04-29-publishing-packages-to-npm/)_”.\n\n## What is Flow?\n\nYou’ve probably already seen [Gary’s talk from CodeMash 2012](https://www.destroyallsoftware.com/talks/wat) about JavaScript. With Flow in your hands, there should be no more „_wat’s_”.\n\n> Flow is a static type checker for your JavaScript code. It does a lot of work to make you more productive. Making you code faster, smarter, more confidently, and to a bigger scale. – [Introduction to type checking with Flow](https://flow.org/en/docs/getting-started/)\n\nFlow was first presented at the [Scale Conference](https://atscaleconference.com/) in 2014 by Facebook. Its main goal was to add additional syntax to JavaScript language to prevent type errors and give developers a more concise idea about bugs that can occur in their code. It also gives a way for IDEs to provide a better environment for spotting errors in real-time.\n\n## How to export Flow definitions?\n\nThere are currently two ways of exporting Flow definitions. The easiest one is by exporting `.js.flow` files within your package. However, if you are planning on versioning your definitions, you should contribute to the `flow-typed` repository instead.\n\n### Exporting Flow files\n\nAll you have to do is copy source files (i.e. not transpiled by _Flow_ and _Babel_) to the `.js.flow` format and include them with the library. Let’s start by installing the required npm dependencies using the following command:\n\n```bash\n$ npm install --save-dev glob fs-extra\n```\n\nOnce installed, we can write a script that will copy all source files to the `/dest` directory and change their extension to `.js.flow`:\n\n```javascript\n// File: ./bin/defs.js\nimport { basename, resolve } from \"path\";\nimport { copy } from \"fs-extra\";\nimport glob from \"glob\";\n\nasync function copyFile(file) {\n  const srcDir  = resolve(__dirname, \"../src\");\n  const destDir = resolve(__dirname, \"../dest\");\n  const fileDef = `${file}.flow`.replace(srcDir, destDir);\n\n  await copy(file, fileDef);\n\n  console.log(`Copied ${file} to ${fileDef}`);\n}\n\nglob(resolve(__dirname, \"../src/**/*.js\"), (err, files) => {\n  files.forEach(file => copyFile(file));\n});\n```\n\nThen, you can execute this script at the end of your build pipeline, as follows:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"npx babel ./src -d ./dest && npm run defs\",\n    \"watch\": \"npx babel ./src -d ./dest --watch\",\n    \"defs\": \"npx babel-node ./bin/defs.js\"\n  },\n\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\"\n  }\n}\n```\n\n### Adding definitions to flow-typed\n\nFlow supports library definitions which allow you to describe the interface of a module or library separate from the implementation of that module/library. You can add your definitions by [contributing library definitions](https://flow-typed.github.io/flow-typed/#/?id=how-do-i-contribute-library-definitions) which reside in the `flow-typed` repository. It will allow people who use your library to fetch definitions by using the following command:\n\n```bash\n$ flow-typed install library@x.x.x\n```\n\n## Conclusion\n\nIt is important to export Flow definitions so Flow can give errors if someone accidentally misuses your library. Additionally, it integrates well with most IDEs, as it gives developers a better experience by providing documentation, auto-complete and errors in real-time.\n","excerpt":"There are more than 31000 repositories on GitHub using Flow but only a few export Flow definitions. In this article, we will see how to export Flow…","tableOfContents":{"items":[{"url":"#what-is-flow","title":"What is Flow?"},{"url":"#how-to-export-flow-definitions","title":"How to export Flow definitions?","items":[{"url":"#exporting-flow-files","title":"Exporting Flow files"},{"url":"#adding-definitions-to-flow-typed","title":"Adding definitions to flow-typed"}]},{"url":"#conclusion","title":"Conclusion"}]},"fields":{"slug":"/blog/2018-05-13-exporting-flow-definitions-to-npm/","timeToRead":{"minutes":2.53,"words":506}},"frontmatter":{"title":"Exporting Flow definitions in npm packages","authors":["Bartosz Łaniewski"],"keywords":["JavaScript","Flow","npm"],"language":"en","description":null,"dateCreated":"May 12, 2018","dateCreatedMeta":"2018-05-13 00:00:00 +0100","dateUpdated":"December 11, 2023","dateUpdatedMeta":"2023-12-12 00:00:00 +0100","datePublished":"May 12, 2018","datePublishedMeta":"2018-05-13 00:00:00 +0100"},"internal":{"contentFilePath":"/home/runner/work/bartozzz.github.io/bartozzz.github.io/content/blog/2018-05-13-exporting-flow-definitions-to-npm/index.md"}},"frontmatter":{"title":"Exporting Flow definitions in npm packages","authors":["Bartosz Łaniewski"],"keywords":["JavaScript","Flow","npm"],"language":"en","dateCreated":"2018-05-13 00:00:00 +0100","dateUpdated":"2023-12-12 00:00:00 +0100","datePublished":"2018-05-13 00:00:00 +0100"}}},"staticQueryHashes":["1271460761","3216310583"],"slicesMap":{}}