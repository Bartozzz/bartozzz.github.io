{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2019-04-19-lazy-loading-and-code-splitting-in-react-apps/","result":{"data":{"site":{"siteMetadata":{"title":"Bartosz Łaniewski"}},"markdownRemark":{"id":"79f6c889-0a74-5ece-acb9-29f0f4822446","excerpt":"Lazy loading is a well-known technique for improving performance and reducing the associated resources costs. It’s so effective that it’s even being added to…","html":"<p>Lazy loading is a well-known technique for improving performance and reducing the associated resources costs. It’s so effective that it’s even <a href=\"https://github.com/whatwg/html/pull/3752\">being added to the web standard</a> via the <code class=\"language-text\">loading=&quot;lazy&quot;</code> attribute. In this article we will learn how to perform lazy ressources loading and code splitting in React.</p>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#glossary\">Glossary</a></li>\n<li><a href=\"#problem\">Problem</a></li>\n<li>\n<p><a href=\"#solutions\">Solutions</a></p>\n<ul>\n<li><a href=\"#code-splitting\">Code splitting</a></li>\n<li>\n<p><a href=\"#lazy-loading-and-preloading\">Lazy loading and preloading</a></p>\n<ul>\n<li><a href=\"#api-calls\">API calls</a></li>\n<li><a href=\"#embedded-documents\">Embedded documents</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#resources\">Resources</a></li>\n</ul>\n</div>\n<blockquote>\n<p><strong>Note:</strong> at the time of writing this article, a lot of APIs are still in development and are not ready to be used in production.</p>\n</blockquote>\n<h2>Glossary</h2>\n<blockquote>\n<p><strong>Code splitting</strong> […] allows you to split your code into various bundles which can then be loaded on demand or in parallel. It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly, can have a major impact on load time. ~ <a href=\"https://webpack.js.org/guides/code-splitting/\">Webpack</a></p>\n</blockquote>\n<blockquote>\n<p><strong>Lazy loading</strong> is a design pattern […] used to defer initialization of an object until the point at which it is needed. It can contribute to efficiency in the program’s operation if properly and appropriately used. […] The performance gains are especially significant if the initialization of the object is costly, such as in case of accessing network services. ~ <a href=\"https://en.wikipedia.org/wiki/Lazy_loading\">Wikipedia</a></p>\n</blockquote>\n<h2>Problem</h2>\n<p>A lot of <abbr title=\"Single-Page Application: a web application that load once and dynamically update as the response for user interactions.\">SPAs</abbr> nowadays are “monolithic” – there’s a giant JavaScript bundle which contains all of the application’s files. This bundle is required via a <code class=\"language-text\">&lt;script&gt;</code> tag, gets downloaded on the initial visit and hopefully cached. This results in:</p>\n<ul>\n<li>a <strong>longer initial load</strong>: we download all of the app’s code, even if it’s not needed to perform the initial render or not used at all;</li>\n<li><strong>faster application rendering and in-app navigation</strong>: all of the components are already downloaded and don’t need to be lazy fetched.</li>\n</ul>\n<p>This is the typical drowback of code-splitting: the initial page load is faster but each dynamic import degrades the visible in-app performance.</p>\n<p>Developers tend to provide a visual feedback for each asynchronous action. It often results in an immense amount of loaders and it’s still badly perceived by users. Once the lazy components render, they can perform other asynchronous actions (like network requests) which adds another layer of loaders.</p>\n<p>As a developer, you need to find the perfect balance between initial and dynamic loading and focus on creating great fallback experiences.</p>\n<h2>Solutions</h2>\n<p>Concurrent React can partially render a tre without committing the result.</p>\n<h3>Code splitting</h3>\n<p>React 16.6 introduced <a href=\"https://reactjs.org/docs/code-splitting.html#reactlazy\"><code class=\"language-text\">React.lazy</code></a> which allows us to perform code splitting and a <a href=\"https://reactjs.org/docs/code-splitting.html#suspense\"><code class=\"language-text\">Suspense</code></a> component which renders placeholders for lazy-loaded resources.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense<span class=\"token punctuation\">,</span> lazy <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Foo <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./Foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Bar <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./Bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LazyFooBar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">maxDuration</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1500</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Loading…\"</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">maxDuration</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1000</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Loading…\"</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The dynamic <code class=\"language-text\">import()</code> tells the bundler to exclude requestes filed from the main bundle. <code class=\"language-text\">React.lazy</code> returns a special component type that will suspend the render until it resolves or rejectes The exact behaviour is described in the following <a href=\"https://github.com/reactjs/rfcs/blob/master/text/0064-lazy.md\">RFC</a>:</p>\n<blockquote>\n<p><code class=\"language-text\">React.lazy</code> accepts a Promise factory, and returns a new component type. When React renders that type for the first time, it triggers the Promise factory […]. If the Promise is fulfilled, React reads the <code class=\"language-text\">.default</code> value from it […], and uses it as a component type for rendering. If the Promise is rejected, the rejection is handled in the same way as React normally handles errors (by letting the nearest error boundary handle it). After the code has loaded, React caches the Promise result. Next renders of the components with this type become synchronous and have no extra cost.</p>\n</blockquote>\n<p><code class=\"language-text\">Suspense</code> allows you to define a fallback placeholder which is displayed when the render is in the suspended state. It also allows you to configure the delay after which the fallback should be shown (via the <code class=\"language-text\">maxDuration</code> property). It will prevent the fallback component from showing up on fast networks.</p>\n<p><code class=\"language-text\">Suspense</code> is quite similar to <code class=\"language-text\">ErrorBoundary</code>. In fact, you can think of <code class=\"language-text\">Suspense</code> as being the <code class=\"language-text\">try { … }</code> block whereas <code class=\"language-text\">ErrorBoundary</code> is the <code class=\"language-text\">catch (error) { … }</code> block.</p>\n<h3>Lazy loading and preloading</h3>\n<p>React team is working on an experimental library named <a href=\"https://github.com/facebook/react/tree/master/packages/react-cache\"><code class=\"language-text\">react-cache</code></a>. It provides APIs for implementing various caches for React applications. As it is dependant on some not-yet-released React APIs, this library should not be used in production.</p>\n<h4>API calls</h4>\n<p>One of <code class=\"language-text\">react-cache</code> use-cases is to suspense rendering on pending requests.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> FooListResource <span class=\"token operator\">=</span> <span class=\"token function\">unstable_createResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">query</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchFooList</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In our render, we just read the data using the <code class=\"language-text\">FooListResource.read</code>. This method returns the response from <code class=\"language-text\">unstable_createResource</code> Promise factory and tells the nearest parent <code class=\"language-text\">React.Suspense</code> to stop the rendering and display the fallback till the resource isn’t ready. The implementation is simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FooList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> FooListResource<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    search<span class=\"token operator\">:</span> <span class=\"token string\">\"Lorem ipsum dolor.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Embedded documents</h4>\n<p>You can use <code class=\"language-text\">react-cache</code> to lezy load embedded documents, such as images, videos, scripts, stylesheets and more. The implementation is quite similar to caching API calls. We start with creating a Image resource:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ImageResource <span class=\"token operator\">=</span> <span class=\"token function\">unstable_createResource</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n      img<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// img.onerror = reject;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, we need to create an alternative <code class=\"language-text\">img</code> component which will make use of the <code class=\"language-text\">ImageResource</code>. For this, we simply need to call <code class=\"language-text\">ImageResource.read(src)</code> – it will tell the nearest parent <code class=\"language-text\">React.Suspense</code> to stop the rendering and display the fallback till the image isn’t fully loaded. The implementation is straightforward:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Img</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> src<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  ImageResource<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>src<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, we can create a wrapper which will take care of providing the low-resolution fallback image for us – we just need to wrap the newely created <code class=\"language-text\">Img</code> component with a <code class=\"language-text\">React.Suspense</code> and provide a fallback image, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function-variable function\">LazyImg</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> lowResSrc<span class=\"token punctuation\">,</span> highResSrc<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>lowResSrc<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Img</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>highResSrc<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Suspense</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>There’s a GitHub project named <code class=\"language-text\">the-platform</code> which turns Web API’s into React Hooks and Suspense-friendly React components. It provides a sets of lazy components out-of-the-box, such as:</p>\n<ul>\n<li><a href=\"https://github.com/palmerhq/the-platform#img\"><code class=\"language-text\">&lt;Img&gt;</code></a></li>\n<li><a href=\"https://github.com/palmerhq/the-platform#script\"><code class=\"language-text\">&lt;Script&gt;</code></a></li>\n<li><a href=\"https://github.com/palmerhq/the-platform#video\"><code class=\"language-text\">&lt;Video&gt;</code></a></li>\n<li><a href=\"https://github.com/palmerhq/the-platform#audio\"><code class=\"language-text\">&lt;Audio&gt;</code></a></li>\n<li><a href=\"https://github.com/palmerhq/the-platform#preload\"><code class=\"language-text\">&lt;Preload&gt;</code></a></li>\n<li><a href=\"https://github.com/palmerhq/the-platform#stylesheet\"><code class=\"language-text\">&lt;Stylesheet&gt;</code></a></li>\n</ul>\n<h2>Resources</h2>\n<ol>\n<li><a href=\"https://reactjs.org/docs/code-splitting.html\">https://reactjs.org/docs/code-splitting.html</a></li>\n<li><a href=\"https://medium.com/@rossbulat/react-lazy-suspense-and-concorrent-react-breakdown-with-examples-2758de98cb1c\">https://medium.com/@rossbulat/react-lazy-suspense-and-concorrent-react-breakdown-with-examples-2758de98cb1c</a></li>\n<li><a href=\"https://github.com/palmerhq/the-platform\">https://github.com/palmerhq/the-platform</a></li>\n<li><a href=\"https://youtube.com/watch?v=SCQgE4mTnjU\">https://youtube.com/watch?v=SCQgE4mTnjU</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ByBPyMBTzM0\">https://www.youtube.com/watch?v=ByBPyMBTzM0</a></li>\n</ol>","frontmatter":{"title":"Lazy loading and code splitting in React","date":"April 19, 2019","description":null}},"previous":{"fields":{"slug":"/2019-03-01-enterprise-scale-react-redux-project-architecture/"},"frontmatter":{"title":"Enterprise-scale React & Redux project architecture"}},"next":null},"pageContext":{"id":"79f6c889-0a74-5ece-acb9-29f0f4822446","previousPostId":"9d9139f0-361b-5a89-809a-0f7033a6aad1","nextPostId":null}},"staticQueryHashes":["2176249065","3000541721"]}