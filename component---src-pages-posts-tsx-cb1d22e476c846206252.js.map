{"version":3,"file":"component---src-pages-posts-tsx-cb1d22e476c846206252.js","mappings":"iJACO,I,oBCaA,SAASA,EAAT,GAQG,IAPRC,EAOQ,EAPRA,KACAC,EAMQ,EANRA,MACAC,EAKQ,EALRA,KACAC,EAIQ,EAJRA,QACAC,EAGQ,EAHRA,QACAC,EAEQ,EAFRA,SACAC,EACQ,EADRA,WAEA,OACE,qBACEC,WAAS,EACTC,SAAS,4BACTC,UDzB4B,6CC0B5BC,KAAML,EAJR,WAME,+BACE,eAAGI,UD3BoB,0CC2BvB,WACE,iBAAME,SAAUT,EAAMU,SAAS,gBAA/B,SACGV,IAGFI,GACC,gCACG,OACD,kBAAMM,SAAS,eAAf,UAA4C,EAAbN,EAA/B,UACC,YAED,SAGN,eAAIG,UD5CoB,2CC4CxB,UACE,SAAC,EAAAI,KAAD,CAAMC,GAAId,EAAMY,SAAS,MAAMG,IAAI,WAAnC,UACE,iBAAMH,SAAS,WAAf,SAA2BX,QAI9BE,MAAAA,GAAAA,EAASa,QACR,eAAIP,UAAU,kBAAd,SACGN,EAAQc,KAAI,SAACC,GAAD,OACX,yBACE,cAAGN,SAAS,SAAZ,SAAsBM,KADfA,QAKX,SAGN,cACEC,wBAAyB,CAAEC,OAAQhB,GACnCQ,SAAS,cACTH,UD9D0B,oD,uHEUnB,SAASY,EAAT,GAAoC,IAC3CC,EAD2C,EAAfC,KACfC,OAAOC,MAE1B,OACE,UAAC,IAAD,YACE,SAAC,IAAD,CAAKxB,MAAM,eAEX,SAAC,IAAD,WACE,eAAIQ,UAAU,OAAd,SACGa,EAAML,KAAI,SAACS,GAAD,OACT,yBACE,SAAC,IAAD,CACE1B,KAAM0B,EAAKC,OAAOC,KAClB3B,MAAOyB,EAAKG,YAAY5B,OAASyB,EAAKC,OAAOC,KAC7C1B,KAAMwB,EAAKG,YAAY3B,KACvBC,QAASuB,EAAKG,YAAY1B,QAC1BC,QAASsB,EAAKG,YAAYC,aAAeJ,EAAKK,QAC9C1B,SAAUqB,EAAKG,YAAYxB,SAC3BC,WAAYoB,EAAKpB,cARZoB,EAAKC,OAAOC","sources":["webpack://laniewski-me/./src/components/PostExcerpt/index.module.scss","webpack://laniewski-me/./src/components/PostExcerpt/index.tsx","webpack://laniewski-me/./src/pages/posts.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var postExcerpt__title = \"index-module--post-excerpt__title---R0AJ\";\nexport var postExcerpt__wrapper = \"index-module--post-excerpt__wrapper--5cYKe\";\nexport var postExcerpt__content = \"index-module--post-excerpt__content--eEd-L\";\nexport var postExcerpt__info = \"index-module--post-excerpt__info--9Rmq1\";","import * as css from \"./index.module.scss\";\n\nimport { Link } from \"gatsby\";\n\ninterface Props {\n  link: string;\n  title: string;\n  date: string;\n  content: string;\n  language: string;\n  timeToRead: number;\n  authors?: string[];\n}\n\nexport function PostExcerpt({\n  link,\n  title,\n  date,\n  authors,\n  content,\n  language,\n  timeToRead,\n}: Props) {\n  return (\n    <article\n      itemScope\n      itemType=\"http://schema.org/Article\"\n      className={css.postExcerpt__wrapper}\n      lang={language}\n    >\n      <header>\n        <p className={css.postExcerpt__info}>\n          <time dateTime={date} itemProp=\"datePublished\">\n            {date}\n          </time>\n\n          {timeToRead ? (\n            <>\n              {\" â€¢ \"}\n              <span itemProp=\"timeRequired\">{timeToRead * 2} min</span>\n              {\" read \"}\n            </>\n          ) : null}\n        </p>\n\n        <h2 className={css.postExcerpt__title}>\n          <Link to={link} itemProp=\"url\" rel=\"bookmark\">\n            <span itemProp=\"headline\">{title}</span>\n          </Link>\n        </h2>\n\n        {authors?.length ? (\n          <ul className=\"visually-hidden\">\n            {authors.map((author) => (\n              <li key={author}>\n                <p itemProp=\"author\">{author}</p>\n              </li>\n            ))}\n          </ul>\n        ) : null}\n      </header>\n\n      <p\n        dangerouslySetInnerHTML={{ __html: content }}\n        itemProp=\"description\"\n        className={css.postExcerpt__content}\n      />\n    </article>\n  );\n}\n","import { graphql } from \"gatsby\";\n\nimport { PostsPageQuery } from \"../../graphql-types\";\n\nimport { Content } from \"../components/Content\";\nimport { Layout } from \"../components/Layout\";\nimport { PostExcerpt } from \"../components/PostExcerpt\";\nimport { SEO } from \"../components/SEO\";\n\ninterface Props {\n  data: PostsPageQuery;\n}\n\nexport default function PostsPage({ data }: Props) {\n  const posts = data.allMdx.nodes;\n\n  return (\n    <Layout>\n      <SEO title=\"All posts\" />\n\n      <Content>\n        <ol className=\"list\">\n          {posts.map((post) => (\n            <li key={post.fields.slug}>\n              <PostExcerpt\n                link={post.fields.slug}\n                title={post.frontmatter.title || post.fields.slug}\n                date={post.frontmatter.date}\n                authors={post.frontmatter.authors}\n                content={post.frontmatter.description || post.excerpt}\n                language={post.frontmatter.language}\n                timeToRead={post.timeToRead}\n              />\n            </li>\n          ))}\n        </ol>\n      </Content>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query PostsPage {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        timeToRead\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          authors\n          language\n          description\n        }\n      }\n    }\n  }\n`;\n"],"names":["PostExcerpt","link","title","date","authors","content","language","timeToRead","itemScope","itemType","className","lang","dateTime","itemProp","Link","to","rel","length","map","author","dangerouslySetInnerHTML","__html","PostsPage","posts","data","allMdx","nodes","post","fields","slug","frontmatter","description","excerpt"],"sourceRoot":""}