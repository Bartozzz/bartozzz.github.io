{"version":3,"file":"component---src-templates-blog-posts-tsx-4aae57b241480c3b3f36.js","mappings":"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","sources":["webpack://laniewski-me/./node_modules/change-case/dist/index.js","webpack://laniewski-me/./gatsby/helpers/mapKeywordToSlug.mjs","webpack://laniewski-me/./gatsby/helpers/mapSlugToImageName.mjs","webpack://laniewski-me/./src/components/Keyword/index.module.scss","webpack://laniewski-me/./src/components/Keyword/index.tsx","webpack://laniewski-me/./src/components/PostExcerpt/PostAuthors.tsx","webpack://laniewski-me/./src/components/PostExcerpt/PostTimeToRead.tsx","webpack://laniewski-me/./src/components/PostExcerpt/index.module.scss","webpack://laniewski-me/./src/components/PostExcerpt/PostKeywords.tsx","webpack://laniewski-me/./src/components/PostExcerpt/index.tsx","webpack://laniewski-me/./src/hooks/useKeywords.tsx","webpack://laniewski-me/./src/templates/blog-posts.tsx"],"sourcesContent":["// Regexps involved with splitting words in various case formats.\nconst SPLIT_LOWER_UPPER_RE = /([\\p{Ll}\\d])(\\p{Lu})/gu;\nconst SPLIT_UPPER_UPPER_RE = /(\\p{Lu})([\\p{Lu}][\\p{Ll}])/gu;\nconst SPLIT_NUMBER_LOWER_RE = /(\\d)(\\p{Ll})/gu;\nconst SPLIT_LETTER_NUMBER_RE = /(\\p{L})(\\d)/gu;\n// Regexp involved with stripping non-word characters from the result.\nconst DEFAULT_STRIP_REGEXP = /[^\\p{L}\\d]+/giu;\n// The replacement value for splits.\nconst SPLIT_REPLACE_VALUE = \"$1\\0$2\";\n// The default characters to keep after transforming case.\nconst DEFAULT_PREFIX_SUFFIX_CHARACTERS = \"\";\n/**\n * Split any cased input strings into an array of words.\n */\nexport function split(value, options) {\n    let result = value.trim();\n    result = result\n        .replace(SPLIT_LOWER_UPPER_RE, SPLIT_REPLACE_VALUE)\n        .replace(SPLIT_UPPER_UPPER_RE, SPLIT_REPLACE_VALUE);\n    if (options?.separateNumbers) {\n        result = result\n            .replace(SPLIT_NUMBER_LOWER_RE, SPLIT_REPLACE_VALUE)\n            .replace(SPLIT_LETTER_NUMBER_RE, SPLIT_REPLACE_VALUE);\n    }\n    result = result.replace(DEFAULT_STRIP_REGEXP, \"\\0\");\n    let start = 0;\n    let end = result.length;\n    // Trim the delimiter from around the output string.\n    while (result.charAt(start) === \"\\0\")\n        start++;\n    if (start === end)\n        return [];\n    while (result.charAt(end - 1) === \"\\0\")\n        end--;\n    return result.slice(start, end).split(/\\0/g);\n}\n/**\n * Convert a string to space separated lower case (`foo bar`).\n */\nexport function noCase(input, options) {\n    const [prefix, value, suffix] = splitPrefixSuffix(input, options);\n    return (prefix +\n        split(value, options)\n            .map(lowerFactory(options?.locale))\n            .join(options?.delimiter ?? \" \") +\n        suffix);\n}\n/**\n * Convert a string to camel case (`fooBar`).\n */\nexport function camelCase(input, options) {\n    const [prefix, value, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = options?.mergeAmbiguousCharacters\n        ? capitalCaseTransformFactory(lower, upper)\n        : pascalCaseTransformFactory(lower, upper);\n    return (prefix +\n        split(value, options)\n            .map((word, index) => {\n            if (index === 0)\n                return lower(word);\n            return transform(word, index);\n        })\n            .join(options?.delimiter ?? \"\") +\n        suffix);\n}\n/**\n * Convert a string to pascal case (`FooBar`).\n */\nexport function pascalCase(input, options) {\n    const [prefix, value, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = options?.mergeAmbiguousCharacters\n        ? capitalCaseTransformFactory(lower, upper)\n        : pascalCaseTransformFactory(lower, upper);\n    return (prefix +\n        split(value, options)\n            .map(transform)\n            .join(options?.delimiter ?? \"\") +\n        suffix);\n}\n/**\n * Convert a string to pascal snake case (`Foo_Bar`).\n */\nexport function pascalSnakeCase(input, options) {\n    return capitalCase(input, { delimiter: \"_\", ...options });\n}\n/**\n * Convert a string to capital case (`Foo Bar`).\n */\nexport function capitalCase(input, options) {\n    const [prefix, value, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    return (prefix +\n        split(value, options)\n            .map(capitalCaseTransformFactory(lower, upper))\n            .join(options?.delimiter ?? \" \") +\n        suffix);\n}\n/**\n * Convert a string to constant case (`FOO_BAR`).\n */\nexport function constantCase(input, options) {\n    const [prefix, value, suffix] = splitPrefixSuffix(input, options);\n    return (prefix +\n        split(value, options)\n            .map(upperFactory(options?.locale))\n            .join(options?.delimiter ?? \"_\") +\n        suffix);\n}\n/**\n * Convert a string to dot case (`foo.bar`).\n */\nexport function dotCase(input, options) {\n    return noCase(input, { delimiter: \".\", ...options });\n}\n/**\n * Convert a string to kebab case (`foo-bar`).\n */\nexport function kebabCase(input, options) {\n    return noCase(input, { delimiter: \"-\", ...options });\n}\n/**\n * Convert a string to path case (`foo/bar`).\n */\nexport function pathCase(input, options) {\n    return noCase(input, { delimiter: \"/\", ...options });\n}\n/**\n * Convert a string to path case (`Foo bar`).\n */\nexport function sentenceCase(input, options) {\n    const [prefix, value, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = capitalCaseTransformFactory(lower, upper);\n    return (prefix +\n        split(value, options)\n            .map((word, index) => {\n            if (index === 0)\n                return transform(word);\n            return lower(word);\n        })\n            .join(options?.delimiter ?? \" \") +\n        suffix);\n}\n/**\n * Convert a string to snake case (`foo_bar`).\n */\nexport function snakeCase(input, options) {\n    return noCase(input, { delimiter: \"_\", ...options });\n}\n/**\n * Convert a string to header case (`Foo-Bar`).\n */\nexport function trainCase(input, options) {\n    return capitalCase(input, { delimiter: \"-\", ...options });\n}\nfunction lowerFactory(locale) {\n    return locale === false\n        ? (input) => input.toLowerCase()\n        : (input) => input.toLocaleLowerCase(locale);\n}\nfunction upperFactory(locale) {\n    return locale === false\n        ? (input) => input.toUpperCase()\n        : (input) => input.toLocaleUpperCase(locale);\n}\nfunction capitalCaseTransformFactory(lower, upper) {\n    return (word) => `${upper(word[0])}${lower(word.slice(1))}`;\n}\nfunction pascalCaseTransformFactory(lower, upper) {\n    return (word, index) => {\n        const char0 = word[0];\n        const initial = index > 0 && char0 >= \"0\" && char0 <= \"9\" ? \"_\" + char0 : upper(char0);\n        return initial + lower(word.slice(1));\n    };\n}\nfunction splitPrefixSuffix(input, options) {\n    const prefixCharacters = options?.prefixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;\n    const suffixCharacters = options?.suffixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;\n    let prefixIndex = 0;\n    let suffixIndex = input.length;\n    while (prefixIndex < input.length) {\n        const char = input.charAt(prefixIndex);\n        if (!prefixCharacters.includes(char))\n            break;\n        prefixIndex++;\n    }\n    while (suffixIndex > prefixIndex) {\n        const index = suffixIndex - 1;\n        const char = input.charAt(index);\n        if (!suffixCharacters.includes(char))\n            break;\n        suffixIndex = index;\n    }\n    return [\n        input.slice(0, prefixIndex),\n        input.slice(prefixIndex, suffixIndex),\n        input.slice(suffixIndex),\n    ];\n}\n//# sourceMappingURL=index.js.map","import * as changeCase from \"change-case\";\n\nexport function mapKeywordToSlug(category) {\n  return changeCase.kebabCase(category.trim().toLowerCase());\n}\n","export function mapSlugToImageName(slug) {\n  return slug.replace(\"/blog/\", \"\").replace(/\\/$/, \"\").replace(\"/\", \"-\");\n}\n","// extracted by mini-css-extract-plugin\nexport var keyword = \"index-module--keyword--3eada\";\nexport var keyword__outlined = \"index-module--keyword__outlined--b6086\";\nexport var keyword__wide = \"index-module--keyword__wide--cd44d\";","import * as css from \"./index.module.scss\";\n\ninterface Props\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLElement>,\n    HTMLElement\n  > {\n  children: string;\n  outlined?: boolean;\n  wide?: boolean;\n}\n\nexport function Keyword({\n  children,\n  outlined,\n  wide,\n  ...detailedHTMLProps\n}: Props) {\n  return (\n    <strong\n      className={`${css.keyword} ${outlined ? css.keyword__outlined : \"\"} ${\n        wide ? css.keyword__wide : \"\"\n      }`}\n      title={`Topic: ${children}`}\n      {...detailedHTMLProps}\n    >\n      {children}\n    </strong>\n  );\n}\n","import * as React from \"react\";\n\ninterface PostAuthorsProps extends React.HTMLAttributes<HTMLSpanElement> {\n  data: string[];\n}\n\nexport function PostAuthors({ data, ...props }: PostAuthorsProps) {\n  return (\n    <span {...props}>\n      {\"By \"}\n      {data.map((author, index) => (\n        <React.Fragment key={author}>\n          <span\n            itemScope\n            itemProp=\"author\"\n            itemType=\"https://schema.org/Person\"\n          >\n            <span itemProp=\"name\">{author}</span>\n          </span>\n\n          {index < data.length - 1 ? \" and \" : \"\"}\n        </React.Fragment>\n      ))}\n    </span>\n  );\n}\n","import * as React from \"react\";\n\ninterface PostTimeToReadProps\n  extends React.TimeHTMLAttributes<HTMLTimeElement> {\n  value: number;\n}\n\nexport function PostTimeToRead({ value, ...props }: PostTimeToReadProps) {\n  // Assuming it's in minutes - hopefully I won't write articles that take hours\n  // to read:\n  const timeToReadRounded = Math.ceil(value);\n  const timeToReadMeta = `PT${timeToReadRounded}M`;\n\n  return (\n    <time {...props} itemProp=\"timeRequired\" dateTime={timeToReadMeta}>\n      {timeToReadRounded} min read\n    </time>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport var postExcerpt__content = \"index-module--post-excerpt__content--78477\";\nexport var postExcerpt__info = \"index-module--post-excerpt__info--f519a\";\nexport var postExcerpt__keyword = \"index-module--post-excerpt__keyword--a0c11\";\nexport var postExcerpt__title = \"index-module--post-excerpt__title--fd1d0\";\nexport var postExcerpt__wrapper = \"index-module--post-excerpt__wrapper--e5c60\";","import * as React from \"react\";\n\nimport { Link } from \"gatsby\";\n\nimport { mapKeywordToSlug } from \"../../../gatsby/helpers/mapKeywordToSlug.mjs\";\n\ninterface PostKeywordsProps\n  extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  data: string[];\n}\n\nexport function PostKeywords({ data, ...props }: PostKeywordsProps) {\n  return data.map((keyword, index) => (\n    <React.Fragment key={keyword}>\n      <Link\n        {...props}\n        to={`/posts/${mapKeywordToSlug(keyword)}/`}\n        title={`Category: ${keyword}`}\n      >\n        {keyword}\n      </Link>\n      {index !== data.length - 1 ? \", \" : null}\n    </React.Fragment>\n  ));\n}\n","import * as css from \"./index.module.scss\";\n\nimport * as React from \"react\";\n\nimport { Link, graphql, useStaticQuery } from \"gatsby\";\n\nimport { PostAuthors } from \"./PostAuthors\";\nimport { PostKeywords } from \"./PostKeywords\";\nimport { PostTimeToRead } from \"./PostTimeToRead\";\n\nimport { mapSlugToImageName } from \"../../../gatsby/helpers/mapSlugToImageName.mjs\";\n\ninterface Props {\n  as?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n  link: string;\n  title: string;\n  datePublished: string;\n  datePublishedMeta: string;\n  dateModifiedMeta: string;\n  content: string;\n  keywords: string[];\n  language: string;\n  wordCount: number;\n  timeToRead: number;\n  authors?: string[];\n}\n\ninterface SiteQuery {\n  site: {\n    siteMetadata: {\n      siteUrl: string;\n    };\n  };\n}\n\nexport function PostExcerpt({\n  as = \"h2\",\n  link,\n  title,\n  datePublished,\n  datePublishedMeta,\n  dateModifiedMeta,\n  authors,\n  content,\n  language,\n  keywords,\n  wordCount,\n  timeToRead,\n}: Props) {\n  const data = useStaticQuery<SiteQuery>(graphql`\n    query {\n      site {\n        siteMetadata {\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  const siteUrl = data.site.siteMetadata.siteUrl;\n  const thumbnailUrl = `${siteUrl}/thumbnails/${mapSlugToImageName(link)}.png`;\n\n  const HeadingWrapper = (\n    props: React.DetailedHTMLProps<\n      React.HTMLAttributes<HTMLElement>,\n      HTMLElement\n    >,\n  ) => React.createElement(as, props);\n\n  return (\n    <article\n      itemScope\n      itemType=\"http://schema.org/Article\"\n      className={css.postExcerpt__wrapper}\n      lang={language}\n    >\n      <meta itemProp=\"image\" content={thumbnailUrl} />\n      <meta itemProp=\"dateModified\" content={dateModifiedMeta} />\n      <meta itemProp=\"wordCount\" content={`${wordCount}`} />\n\n      <header>\n        <p className={css.postExcerpt__info}>\n          <PostAuthors data={authors} className=\"visually-hidden\" />\n\n          <time dateTime={datePublishedMeta} itemProp=\"datePublished\">\n            {datePublished}\n          </time>\n\n          <span aria-hidden>{\" • \"}</span>\n          <PostTimeToRead value={timeToRead} />\n\n          <span aria-hidden>{\" • \"}</span>\n          <PostKeywords data={keywords} className={css.postExcerpt__keyword} />\n        </p>\n\n        <HeadingWrapper className={css.postExcerpt__title}>\n          <Link to={link} itemProp=\"url\" rel=\"bookmark\">\n            <span itemProp=\"headline\">{title}</span>\n          </Link>\n        </HeadingWrapper>\n      </header>\n\n      <p\n        dangerouslySetInnerHTML={{ __html: content }}\n        itemProp=\"description\"\n        className={css.postExcerpt__content}\n      />\n    </article>\n  );\n}\n","import * as React from \"react\";\n\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ninterface KeywordsDataQuery {\n  allMdx: {\n    nodes: Array<{\n      frontmatter: {\n        keywords: string[];\n      };\n    }>;\n  };\n}\n\nfunction normalizeKeyword(keyword: string) {\n  return keyword.toLowerCase();\n}\n\nconst KEYWORDS_TO_HIDE = [\n  normalizeKeyword(\"Blockchain\"),\n  normalizeKeyword(\"Cryptocurrency\"),\n];\n\nconst KEYWORDS_ORDER = {\n  [normalizeKeyword(\"JavaScript\")]: 0,\n  [normalizeKeyword(\"TypeScript\")]: 1,\n  [normalizeKeyword(\"React\")]: 2,\n  [normalizeKeyword(\"React Native\")]: 3,\n};\n\nexport function useKeywords() {\n  const query = useStaticQuery<KeywordsDataQuery>(graphql`\n    query KeywordsData {\n      allMdx {\n        nodes {\n          frontmatter {\n            keywords\n          }\n        }\n      }\n    }\n  `);\n\n  const uniqueSortedKeywords = React.useMemo(() => {\n    const KEYWORDS_WITH_ORDER = Object.entries(KEYWORDS_ORDER).length;\n\n    return query.allMdx.nodes\n      .flatMap((node) => node.frontmatter.keywords)\n      .reduce<Array<{ quantity: number; name: string }>>((acc, value) => {\n        const dupeIndex = acc.findIndex((accItem) => accItem.name === value);\n\n        if (dupeIndex === -1) {\n          acc.push({ quantity: 1, name: value });\n        } else {\n          acc[dupeIndex].quantity++;\n        }\n\n        return acc;\n      }, [])\n      .filter(\n        (keyword) => !KEYWORDS_TO_HIDE.includes(normalizeKeyword(keyword.name)),\n      )\n      .sort((a, b) => b.quantity - a.quantity)\n      .sort(\n        (a, b) =>\n          (KEYWORDS_ORDER[normalizeKeyword(a.name)] ?? KEYWORDS_WITH_ORDER) -\n          (KEYWORDS_ORDER[normalizeKeyword(b.name)] ?? KEYWORDS_WITH_ORDER),\n      );\n  }, [query.allMdx.nodes]);\n\n  return uniqueSortedKeywords;\n}\n","import \"./blog-posts.scss\";\n\nimport { HeadProps, Link, PageProps, graphql } from \"gatsby\";\n\nimport { mapKeywordToSlug } from \"../../gatsby/helpers/mapKeywordToSlug.mjs\";\n\nimport { BlogPost } from \"../../gatsby/types/queries\";\n\nimport { Content } from \"../components/Content\";\nimport { Keyword } from \"../components/Keyword\";\nimport { Layout } from \"../components/Layout\";\nimport { PostExcerpt } from \"../components/PostExcerpt\";\nimport { SEO } from \"../components/SEO\";\nimport { useKeywords } from \"../hooks/useKeywords\";\n\ninterface DataType {\n  site: {\n    siteMetadata: {\n      siteUrl: string;\n    };\n  };\n}\n\ninterface PageContextType {\n  data: BlogPost[];\n  keyword?: string;\n}\n\nexport default function BlogPostsTemplate({\n  pageContext,\n}: PageProps<DataType, PageContextType>) {\n  const keywords = useKeywords();\n\n  const pagePosts = pageContext.data;\n  const pageKeyword = pageContext.keyword;\n\n  return (\n    <Layout>\n      <Content>\n        <h1 className=\"heading\">\n          {pageKeyword\n            ? `Articles about ${pageKeyword}`\n            : \"Most Recent Articles\"}\n        </h1>\n\n        <ul className=\"keywords\">\n          <li>\n            <Link to=\"/posts/\">\n              <Keyword wide outlined={pageKeyword ? true : false}>\n                All\n              </Keyword>\n            </Link>\n          </li>\n\n          {keywords.map((keyword) => (\n            <li key={keyword.name}>\n              <Link to={`/posts/${mapKeywordToSlug(keyword.name)}/`}>\n                <Keyword\n                  wide\n                  outlined={keyword.name !== pageKeyword}\n                  title={`${keyword.name} category contains ${\n                    keyword.quantity === 1\n                      ? \"1 post\"\n                      : `${keyword.quantity} posts`\n                  }`}\n                >\n                  {keyword.name}\n                </Keyword>\n              </Link>\n            </li>\n          ))}\n        </ul>\n\n        <ol className=\"list\">\n          {pagePosts.map((post) => (\n            <li key={post.fields.slug}>\n              <PostExcerpt\n                link={post.fields.slug}\n                wordCount={post.fields.timeToRead.words}\n                timeToRead={post.fields.timeToRead?.minutes}\n                title={post.frontmatter.title || post.fields.slug}\n                datePublished={post.frontmatter.datePublished}\n                datePublishedMeta={post.frontmatter.datePublishedMeta}\n                dateModifiedMeta={post.frontmatter.dateUpdatedMeta}\n                authors={post.frontmatter.authors}\n                content={post.frontmatter.description || post.excerpt}\n                language={post.frontmatter.language}\n                keywords={post.frontmatter.keywords}\n              />\n            </li>\n          ))}\n        </ol>\n      </Content>\n    </Layout>\n  );\n}\n\nexport function Head({\n  data,\n  pageContext,\n  location,\n}: HeadProps<DataType, PageContextType>) {\n  const pageKeyword = pageContext.keyword;\n  const siteUrl = data.site.siteMetadata.siteUrl;\n  const slug = location.pathname;\n\n  return (\n    <SEO\n      url={`${siteUrl}${slug}`}\n      title={\n        pageKeyword\n          ? `${pageKeyword} posts by Bartosz Łaniewski`\n          : \"Blog by Bartosz Łaniewski\"\n      }\n      description={\n        pageKeyword\n          ? `My latest posts, updates, and stories about ${pageKeyword} for developers`\n          : \"My latest posts, updates, and stories about software engineering for developers\"\n      }\n    />\n  );\n}\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`;\n"],"names":["SPLIT_LOWER_UPPER_RE","SPLIT_UPPER_UPPER_RE","SPLIT_NUMBER_LOWER_RE","SPLIT_LETTER_NUMBER_RE","DEFAULT_STRIP_REGEXP","SPLIT_REPLACE_VALUE","DEFAULT_PREFIX_SUFFIX_CHARACTERS","split","value","options","result","trim","replace","separateNumbers","start","end","length","charAt","slice","noCase","input","prefix","suffix","splitPrefixSuffix","map","lowerFactory","locale","join","delimiter","toLowerCase","toLocaleLowerCase","prefixCharacters","suffixCharacters","prefixIndex","suffixIndex","char","includes","index","mapKeywordToSlug","category","mapSlugToImageName","slug","keyword","keyword__outlined","keyword__wide","Keyword","_ref","children","outlined","wide","detailedHTMLProps","_jsx","className","css","title","PostAuthors","data","props","_jsxs","author","React","itemScope","itemProp","itemType","PostTimeToRead","timeToReadRounded","Math","ceil","timeToReadMeta","dateTime","postExcerpt__content","postExcerpt__info","postExcerpt__keyword","postExcerpt__title","postExcerpt__wrapper","PostKeywords","Link","to","PostExcerpt","as","link","datePublished","datePublishedMeta","dateModifiedMeta","authors","content","language","keywords","wordCount","timeToRead","thumbnailUrl","useStaticQuery","site","siteMetadata","siteUrl","HeadingWrapper","lang","rel","dangerouslySetInnerHTML","__html","normalizeKeyword","KEYWORDS_TO_HIDE","KEYWORDS_ORDER","BlogPostsTemplate","pageContext","query","KEYWORDS_WITH_ORDER","Object","entries","allMdx","nodes","flatMap","node","frontmatter","reduce","acc","dupeIndex","findIndex","accItem","name","push","quantity","filter","sort","a","b","_KEYWORDS_ORDER$norma","_KEYWORDS_ORDER$norma2","useKeywords","pagePosts","pageKeyword","Layout","Content","post","_post$fields$timeToRe","fields","words","minutes","dateUpdatedMeta","description","excerpt","Head","_ref2","location","pathname","SEO","url"],"sourceRoot":""}