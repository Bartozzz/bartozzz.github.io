{"version":3,"file":"component---src-templates-blog-posts-tsx-294ed438e1a7e8f0780e.js","mappings":"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","sources":["webpack://laniewski-me/./node_modules/change-case/dist/index.js","webpack://laniewski-me/./gatsby/helpers/mapKeywordToSlug.mjs","webpack://laniewski-me/./src/components/Keyword/index.module.scss","webpack://laniewski-me/./src/components/Keyword/index.tsx","webpack://laniewski-me/./src/components/PostExcerpt/index.module.scss","webpack://laniewski-me/./src/components/PostExcerpt/index.tsx","webpack://laniewski-me/./src/hooks/useKeywords.tsx","webpack://laniewski-me/./src/templates/blog-posts.tsx"],"sourcesContent":["// Regexps involved with splitting words in various case formats.\nconst SPLIT_LOWER_UPPER_RE = /([\\p{Ll}\\d])(\\p{Lu})/gu;\nconst SPLIT_UPPER_UPPER_RE = /(\\p{Lu})([\\p{Lu}][\\p{Ll}])/gu;\nconst SPLIT_NUMBER_LOWER_RE = /(\\d)(\\p{Ll})/gu;\nconst SPLIT_LETTER_NUMBER_RE = /(\\p{L})(\\d)/gu;\n// Regexp involved with stripping non-word characters from the result.\nconst DEFAULT_STRIP_REGEXP = /[^\\p{L}\\d]+/giu;\n// The replacement value for splits.\nconst SPLIT_REPLACE_VALUE = \"$1\\0$2\";\n// The default characters to keep after transforming case.\nconst DEFAULT_PREFIX_CHARACTERS = \"\";\n/**\n * Split any cased input strings into an array of words.\n */\nexport function split(input, options) {\n    let result = input.trim();\n    result = result\n        .replace(SPLIT_LOWER_UPPER_RE, SPLIT_REPLACE_VALUE)\n        .replace(SPLIT_UPPER_UPPER_RE, SPLIT_REPLACE_VALUE);\n    if (options?.separateNumbers) {\n        result = result\n            .replace(SPLIT_NUMBER_LOWER_RE, SPLIT_REPLACE_VALUE)\n            .replace(SPLIT_LETTER_NUMBER_RE, SPLIT_REPLACE_VALUE);\n    }\n    result = result.replace(DEFAULT_STRIP_REGEXP, \"\\0\");\n    let start = 0;\n    let end = result.length;\n    // Trim the delimiter from around the output string.\n    while (result.charAt(start) === \"\\0\")\n        start++;\n    if (start === end)\n        return [];\n    while (result.charAt(end - 1) === \"\\0\")\n        end--;\n    return result.slice(start, end).split(/\\0/g);\n}\n/**\n * Convert a string to space separated lower case (`foo bar`).\n */\nexport function noCase(input, options) {\n    const prefix = getPrefix(input, options?.prefixCharacters);\n    return (prefix +\n        split(input, options)\n            .map(lowerFactory(options?.locale))\n            .join(options?.delimiter ?? \" \"));\n}\n/**\n * Convert a string to camel case (`fooBar`).\n */\nexport function camelCase(input, options) {\n    const prefix = getPrefix(input, options?.prefixCharacters);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = options?.mergeAmbiguousCharacters\n        ? capitalCaseTransformFactory(lower, upper)\n        : pascalCaseTransformFactory(lower, upper);\n    return (prefix +\n        split(input, options)\n            .map((word, index) => {\n            if (index === 0)\n                return lower(word);\n            return transform(word, index);\n        })\n            .join(options?.delimiter ?? \"\"));\n}\n/**\n * Convert a string to pascal case (`FooBar`).\n */\nexport function pascalCase(input, options) {\n    const prefix = getPrefix(input, options?.prefixCharacters);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = options?.mergeAmbiguousCharacters\n        ? capitalCaseTransformFactory(lower, upper)\n        : pascalCaseTransformFactory(lower, upper);\n    return (prefix +\n        split(input, options)\n            .map(transform)\n            .join(options?.delimiter ?? \"\"));\n}\n/**\n * Convert a string to pascal snake case (`Foo_Bar`).\n */\nexport function pascalSnakeCase(input, options) {\n    return capitalCase(input, { delimiter: \"_\", ...options });\n}\n/**\n * Convert a string to capital case (`Foo Bar`).\n */\nexport function capitalCase(input, options) {\n    const prefix = getPrefix(input, options?.prefixCharacters);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    return (prefix +\n        split(input, options)\n            .map(capitalCaseTransformFactory(lower, upper))\n            .join(options?.delimiter ?? \" \"));\n}\n/**\n * Convert a string to constant case (`FOO_BAR`).\n */\nexport function constantCase(input, options) {\n    const prefix = getPrefix(input, options?.prefixCharacters);\n    return (prefix +\n        split(input, options)\n            .map(upperFactory(options?.locale))\n            .join(options?.delimiter ?? \"_\"));\n}\n/**\n * Convert a string to dot case (`foo.bar`).\n */\nexport function dotCase(input, options) {\n    return noCase(input, { delimiter: \".\", ...options });\n}\n/**\n * Convert a string to kebab case (`foo-bar`).\n */\nexport function kebabCase(input, options) {\n    return noCase(input, { delimiter: \"-\", ...options });\n}\n/**\n * Convert a string to path case (`foo/bar`).\n */\nexport function pathCase(input, options) {\n    return noCase(input, { delimiter: \"/\", ...options });\n}\n/**\n * Convert a string to path case (`Foo bar`).\n */\nexport function sentenceCase(input, options) {\n    const prefix = getPrefix(input, options?.prefixCharacters);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = capitalCaseTransformFactory(lower, upper);\n    return (prefix +\n        split(input, options)\n            .map((word, index) => {\n            if (index === 0)\n                return transform(word);\n            return lower(word);\n        })\n            .join(options?.delimiter ?? \" \"));\n}\n/**\n * Convert a string to snake case (`foo_bar`).\n */\nexport function snakeCase(input, options) {\n    return noCase(input, { delimiter: \"_\", ...options });\n}\n/**\n * Convert a string to header case (`Foo-Bar`).\n */\nexport function trainCase(input, options) {\n    return capitalCase(input, { delimiter: \"-\", ...options });\n}\nfunction lowerFactory(locale) {\n    return locale === false\n        ? (input) => input.toLowerCase()\n        : (input) => input.toLocaleLowerCase(locale);\n}\nfunction upperFactory(locale) {\n    return locale === false\n        ? (input) => input.toUpperCase()\n        : (input) => input.toLocaleUpperCase(locale);\n}\nfunction capitalCaseTransformFactory(lower, upper) {\n    return (word) => `${upper(word[0])}${lower(word.slice(1))}`;\n}\nfunction pascalCaseTransformFactory(lower, upper) {\n    return (word, index) => {\n        const char0 = word[0];\n        const initial = index > 0 && char0 >= \"0\" && char0 <= \"9\" ? \"_\" + char0 : upper(char0);\n        return initial + lower(word.slice(1));\n    };\n}\nfunction getPrefix(input, prefixCharacters = DEFAULT_PREFIX_CHARACTERS) {\n    let prefix = \"\";\n    for (let i = 0; i < input.length; i++) {\n        const char = input.charAt(i);\n        if (prefixCharacters.includes(char)) {\n            prefix += char;\n        }\n        else {\n            break;\n        }\n    }\n    return prefix;\n}\n//# sourceMappingURL=index.js.map","import * as changeCase from \"change-case\";\n\nexport function mapKeywordToSlug(category) {\n  return changeCase.kebabCase(category.trim().toLowerCase());\n}\n","// extracted by mini-css-extract-plugin\nexport var keyword = \"index-module--keyword--3eada\";\nexport var keyword__outlined = \"index-module--keyword__outlined--b6086\";\nexport var keyword__wide = \"index-module--keyword__wide--cd44d\";","import * as css from \"./index.module.scss\";\n\ninterface Props\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLElement>,\n    HTMLElement\n  > {\n  children: string;\n  outlined?: boolean;\n  wide?: boolean;\n}\n\nexport function Keyword({\n  children,\n  outlined,\n  wide,\n  ...detailedHTMLProps\n}: Props) {\n  return (\n    <strong\n      className={`${css.keyword} ${outlined ? css.keyword__outlined : \"\"} ${\n        wide ? css.keyword__wide : \"\"\n      }`}\n      title={`Topic: ${children}`}\n      {...detailedHTMLProps}\n    >\n      {children}\n    </strong>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport var postExcerpt__content = \"index-module--post-excerpt__content--78477\";\nexport var postExcerpt__info = \"index-module--post-excerpt__info--f519a\";\nexport var postExcerpt__keyword = \"index-module--post-excerpt__keyword--a0c11\";\nexport var postExcerpt__title = \"index-module--post-excerpt__title--fd1d0\";\nexport var postExcerpt__wrapper = \"index-module--post-excerpt__wrapper--e5c60\";","import * as css from \"./index.module.scss\";\n\nimport React from \"react\";\n\nimport { Link } from \"gatsby\";\n\nimport { mapKeywordToSlug } from \"../../../gatsby/helpers/mapKeywordToSlug.mjs\";\n\ninterface Props {\n  link: string;\n  title: string;\n  date: string;\n  content: string;\n  keywords: string[];\n  language: string;\n  timeToRead: number;\n  authors?: string[];\n}\n\nexport function PostExcerpt({\n  link,\n  title,\n  date,\n  authors,\n  content,\n  language,\n  keywords,\n  timeToRead,\n}: Props) {\n  return (\n    <article\n      itemScope\n      itemType=\"http://schema.org/Article\"\n      className={css.postExcerpt__wrapper}\n      lang={language}\n    >\n      <header>\n        <p className={css.postExcerpt__info}>\n          <time dateTime={date} itemProp=\"datePublished\">\n            {date}\n          </time>\n\n          {timeToRead ? (\n            <>\n              <span aria-hidden>{\" • \"}</span>\n              <span itemProp=\"timeRequired\">{Math.ceil(timeToRead)} min</span>\n              {\" read \"}\n            </>\n          ) : null}\n\n          {keywords?.length > 0 ? (\n            <>\n              <span aria-hidden>{\" • \"}</span>\n              {keywords.map((keyword, index) => (\n                <React.Fragment key={keyword}>\n                  <Link\n                    to={`/posts/${mapKeywordToSlug(keyword)}/`}\n                    title={`Category: ${keyword}`}\n                    className={css.postExcerpt__keyword}\n                  >\n                    {keyword}\n                  </Link>\n                  {index !== keywords.length - 1 ? \", \" : null}\n                </React.Fragment>\n              ))}\n            </>\n          ) : null}\n        </p>\n\n        <h2 className={css.postExcerpt__title}>\n          <Link to={link} itemProp=\"url\" rel=\"bookmark\">\n            <span itemProp=\"headline\">{title}</span>\n          </Link>\n        </h2>\n\n        {authors?.length ? (\n          <ul className=\"visually-hidden\">\n            {authors.map((author) => (\n              <li key={author}>\n                <p itemProp=\"author\">{author}</p>\n              </li>\n            ))}\n          </ul>\n        ) : null}\n      </header>\n\n      <p\n        dangerouslySetInnerHTML={{ __html: content }}\n        itemProp=\"description\"\n        className={css.postExcerpt__content}\n      />\n    </article>\n  );\n}\n","import * as React from \"react\";\n\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ninterface KeywordsDataQuery {\n  allMdx: {\n    nodes: Array<{\n      frontmatter: {\n        keywords: string[];\n      };\n    }>;\n  };\n}\n\nfunction normalizeKeyword(keyword: string) {\n  return keyword.toLowerCase();\n}\n\nconst KEYWORDS_TO_HIDE = [\n  normalizeKeyword(\"Blockchain\"),\n  normalizeKeyword(\"Cryptocurrency\"),\n];\n\nconst KEYWORDS_ORDER = {\n  [normalizeKeyword(\"JavaScript\")]: 0,\n  [normalizeKeyword(\"TypeScript\")]: 1,\n  [normalizeKeyword(\"React\")]: 2,\n  [normalizeKeyword(\"React Native\")]: 3,\n};\n\nexport function useKeywords() {\n  const query = useStaticQuery<KeywordsDataQuery>(graphql`\n    query KeywordsData {\n      allMdx {\n        nodes {\n          frontmatter {\n            keywords\n          }\n        }\n      }\n    }\n  `);\n\n  const uniqueSortedKeywords = React.useMemo(() => {\n    const KEYWORDS_WITH_ORDER = Object.entries(KEYWORDS_ORDER).length;\n\n    return query.allMdx.nodes\n      .flatMap((node) => node.frontmatter.keywords)\n      .reduce<Array<{ quantity: number; name: string }>>((acc, value) => {\n        const dupeIndex = acc.findIndex((accItem) => accItem.name === value);\n\n        if (dupeIndex === -1) {\n          acc.push({ quantity: 1, name: value });\n        } else {\n          acc[dupeIndex].quantity++;\n        }\n\n        return acc;\n      }, [])\n      .filter(\n        (keyword) => !KEYWORDS_TO_HIDE.includes(normalizeKeyword(keyword.name)),\n      )\n      .sort((a, b) => b.quantity - a.quantity)\n      .sort(\n        (a, b) =>\n          (KEYWORDS_ORDER[normalizeKeyword(a.name)] ?? KEYWORDS_WITH_ORDER) -\n          (KEYWORDS_ORDER[normalizeKeyword(b.name)] ?? KEYWORDS_WITH_ORDER),\n      );\n  }, [query.allMdx.nodes]);\n\n  return uniqueSortedKeywords;\n}\n","import \"./blog-posts.scss\";\n\nimport { Link, PageProps, graphql } from \"gatsby\";\n\nimport { mapKeywordToSlug } from \"../../gatsby/helpers/mapKeywordToSlug.mjs\";\n\nimport { BlogPost } from \"../../gatsby/types/queries\";\n\nimport { Content } from \"../components/Content\";\nimport { Keyword } from \"../components/Keyword\";\nimport { Layout } from \"../components/Layout\";\nimport { PostExcerpt } from \"../components/PostExcerpt\";\nimport { SEO } from \"../components/SEO\";\nimport { useKeywords } from \"../hooks/useKeywords\";\n\ntype Props = PageProps<\n  {\n    site: {\n      siteMetadata: {\n        siteUrl: string;\n      };\n    };\n  },\n  {\n    data: BlogPost[];\n    keyword?: string;\n  }\n>;\n\nexport default function BlogPostsTemplate({ pageContext }: Props) {\n  const keywords = useKeywords();\n\n  const pagePosts = pageContext.data;\n  const pageKeyword = pageContext.keyword;\n\n  return (\n    <Layout>\n      <Content>\n        <h1 className=\"heading\">Blog</h1>\n\n        <ul className=\"keywords\">\n          <li>\n            <Link to=\"/posts/\">\n              <Keyword wide outlined={pageKeyword ? true : false}>\n                All\n              </Keyword>\n            </Link>\n          </li>\n\n          {keywords.map((keyword) => (\n            <li key={keyword.name}>\n              <Link to={`/posts/${mapKeywordToSlug(keyword.name)}/`}>\n                <Keyword\n                  wide\n                  outlined={keyword.name !== pageKeyword}\n                  title={`${keyword.name} category contains ${\n                    keyword.quantity === 1\n                      ? \"1 post\"\n                      : `${keyword.quantity} posts`\n                  }`}\n                >\n                  {keyword.name}\n                </Keyword>\n              </Link>\n            </li>\n          ))}\n        </ul>\n\n        <ol className=\"list\">\n          {pagePosts.map((post) => (\n            <li key={post.fields.slug}>\n              <PostExcerpt\n                link={post.fields.slug}\n                timeToRead={post.fields.timeToRead?.minutes}\n                title={post.frontmatter.title || post.fields.slug}\n                date={post.frontmatter.datePublished}\n                authors={post.frontmatter.authors}\n                content={post.frontmatter.description || post.excerpt}\n                language={post.frontmatter.language}\n                keywords={post.frontmatter.keywords}\n              />\n            </li>\n          ))}\n        </ol>\n      </Content>\n    </Layout>\n  );\n}\n\nexport function Head({ data, pageContext, location }: Props) {\n  const pageKeyword = pageContext.keyword;\n  const siteUrl = data.site.siteMetadata.siteUrl;\n  const slug = location.pathname;\n\n  return (\n    <SEO\n      url={`${siteUrl}${slug}`}\n      title={\n        pageKeyword\n          ? `${pageKeyword} posts by Bartosz Łaniewski`\n          : \"Blog by Bartosz Łaniewski\"\n      }\n      description={\n        pageKeyword\n          ? `My latest posts, updates, and stories about ${pageKeyword} for developers`\n          : \"My latest posts, updates, and stories about software engineering for developers\"\n      }\n    >\n      <link rel=\"canonical\" href={`${siteUrl}/posts/`} />\n    </SEO>\n  );\n}\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`;\n"],"names":["SPLIT_LOWER_UPPER_RE","SPLIT_UPPER_UPPER_RE","SPLIT_NUMBER_LOWER_RE","SPLIT_LETTER_NUMBER_RE","DEFAULT_STRIP_REGEXP","SPLIT_REPLACE_VALUE","DEFAULT_PREFIX_CHARACTERS","split","input","options","result","trim","replace","separateNumbers","start","end","length","charAt","slice","noCase","getPrefix","prefixCharacters","map","lowerFactory","locale","join","delimiter","toLowerCase","toLocaleLowerCase","prefix","i","char","includes","mapKeywordToSlug","category","keyword","keyword__outlined","keyword__wide","Keyword","_ref","children","outlined","wide","detailedHTMLProps","_jsx","className","css","title","postExcerpt__content","postExcerpt__info","postExcerpt__keyword","postExcerpt__title","postExcerpt__wrapper","PostExcerpt","link","date","authors","content","language","keywords","timeToRead","_jsxs","itemScope","itemType","lang","dateTime","itemProp","_Fragment","Math","ceil","index","React","Link","to","rel","author","dangerouslySetInnerHTML","__html","normalizeKeyword","KEYWORDS_TO_HIDE","KEYWORDS_ORDER","BlogPostsTemplate","pageContext","query","useStaticQuery","KEYWORDS_WITH_ORDER","Object","entries","allMdx","nodes","flatMap","node","frontmatter","reduce","acc","value","dupeIndex","findIndex","accItem","name","push","quantity","filter","sort","a","b","_KEYWORDS_ORDER$norma","_KEYWORDS_ORDER$norma2","useKeywords","pagePosts","data","pageKeyword","Layout","Content","post","_post$fields$timeToRe","fields","slug","minutes","datePublished","description","excerpt","Head","_ref2","location","siteUrl","site","siteMetadata","pathname","SEO","url","href"],"sourceRoot":""}