{"version":3,"file":"component---src-pages-posts-tsx-e507a6e840f041200fc7.js","mappings":"iJACO,I,oBCYA,SAASA,EAAT,GAOI,IANTC,EAMQ,EANRA,KACAC,EAKQ,EALRA,MACAC,EAIQ,EAJRA,KACAC,EAGQ,EAHRA,QACAC,EAEQ,EAFRA,QACAC,EACQ,EADRA,SAEA,OACE,qBACEC,WAAS,EACTC,SAAS,4BACTC,UDvB4B,6CCwB5BC,KAAMJ,EAJR,WAME,+BACE,iBACEG,UD1BqB,0CC2BrBE,SAAUR,EACVS,SAAS,gBAHX,SAKGT,KAGH,eAAIM,UDpCoB,2CCoCxB,UACE,SAAC,KAAD,CAAMI,GAAIZ,EAAMW,SAAS,MAAzB,UACE,iBAAMA,SAAS,WAAf,SAA2BV,QAI9BE,MAAAA,GAAAA,EAASU,QACR,eAAIL,UAAU,kBAAd,SACGL,EAAQW,KAAI,SAACC,GAAD,OACX,yBACE,cAAGJ,SAAS,SAAZ,SAAsBI,KADfA,QAKX,SAGN,cACEC,wBAAyB,CAAEC,OAAQb,GACnCO,SAAS,cACTH,UDtD0B,oD,uHEUnB,SAASU,EAAT,GAAqC,IAC5CC,EAD2C,EAAfC,KACfC,OAAOC,MAE1B,OACE,UAAC,IAAD,YACE,SAAC,IAAD,CAAKrB,MAAM,eAEX,SAAC,IAAD,WACE,eAAIO,UAAU,OAAd,SACGW,EAAML,KAAI,SAACS,GAAD,OACT,yBACE,SAAC,IAAD,CACEvB,KAAMuB,EAAKC,OAAOC,KAClBxB,MAAOsB,EAAKG,YAAYzB,OAASsB,EAAKC,OAAOC,KAC7CvB,KAAMqB,EAAKG,YAAYxB,KACvBC,QAASoB,EAAKG,YAAYvB,QAC1BC,QAASmB,EAAKG,YAAYC,aAAeJ,EAAKK,QAC9CvB,SAAUkB,EAAKG,YAAYrB,YAPtBkB,EAAKC,OAAOC","sources":["webpack://laniewski-me/./src/components/PostExcerpt/index.module.scss","webpack://laniewski-me/./src/components/PostExcerpt/index.tsx","webpack://laniewski-me/./src/pages/posts.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var postExcerpt__title = \"index-module--post-excerpt__title---R0AJ\";\nexport var postExcerpt__wrapper = \"index-module--post-excerpt__wrapper--5cYKe\";\nexport var postExcerpt__content = \"index-module--post-excerpt__content--eEd-L\";\nexport var postExcerpt__date = \"index-module--post-excerpt__date--7Ztjd\";","import * as css from \"./index.module.scss\";\n\nimport { Link } from \"gatsby\";\n\ninterface Props {\n  link: string;\n  title: string;\n  date: string;\n  content: string;\n  language: string;\n  authors?: string[];\n}\n\nexport function PostExcerpt({\n  link,\n  title,\n  date,\n  authors,\n  content,\n  language,\n}: Props) {\n  return (\n    <article\n      itemScope\n      itemType=\"http://schema.org/Article\"\n      className={css.postExcerpt__wrapper}\n      lang={language}\n    >\n      <header>\n        <time\n          className={css.postExcerpt__date}\n          dateTime={date}\n          itemProp=\"datePublished\"\n        >\n          {date}\n        </time>\n\n        <h2 className={css.postExcerpt__title}>\n          <Link to={link} itemProp=\"url\">\n            <span itemProp=\"headline\">{title}</span>\n          </Link>\n        </h2>\n\n        {authors?.length ? (\n          <ul className=\"visually-hidden\">\n            {authors.map((author) => (\n              <li key={author}>\n                <p itemProp=\"author\">{author}</p>\n              </li>\n            ))}\n          </ul>\n        ) : null}\n      </header>\n\n      <p\n        dangerouslySetInnerHTML={{ __html: content }}\n        itemProp=\"description\"\n        className={css.postExcerpt__content}\n      />\n    </article>\n  );\n}\n","import { graphql } from \"gatsby\";\n\nimport { PostsPageQuery } from \"../../graphql-types\";\n\nimport { Content } from \"../components/Content\";\nimport { Layout } from \"../components/Layout\";\nimport { PostExcerpt } from \"../components/PostExcerpt\";\nimport { SEO } from \"../components/SEO\";\n\ninterface Props {\n  data: PostsPageQuery;\n}\n\nexport default function PostsPage({ data }: Props) {\n  const posts = data.allMdx.nodes;\n\n  return (\n    <Layout>\n      <SEO title=\"All posts\" />\n\n      <Content>\n        <ol className=\"list\">\n          {posts.map((post) => (\n            <li key={post.fields.slug}>\n              <PostExcerpt\n                link={post.fields.slug}\n                title={post.frontmatter.title || post.fields.slug}\n                date={post.frontmatter.date}\n                authors={post.frontmatter.authors}\n                content={post.frontmatter.description || post.excerpt}\n                language={post.frontmatter.language}\n              />\n            </li>\n          ))}\n        </ol>\n      </Content>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query PostsPage {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          authors\n          language\n          description\n        }\n      }\n    }\n  }\n`;\n"],"names":["PostExcerpt","link","title","date","authors","content","language","itemScope","itemType","className","lang","dateTime","itemProp","to","length","map","author","dangerouslySetInnerHTML","__html","PostsPage","posts","data","allMdx","nodes","post","fields","slug","frontmatter","description","excerpt"],"sourceRoot":""}