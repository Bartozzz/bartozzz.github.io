=sassline($fontsize, $font, $lineheight: 2, $below: 2, $breakpoint: 0)
    $font-value:  type-of($fontsize)
    $break-value: type-of($breakpoint)
    $cap-height:  map-get($font, cap-height)
    $in-scale:    in-modular-scale(scale-0, $fontsize)

    line-height: #{$lineheight}rem

    @if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0
        @if $font-value == number
            $rootsize: nth($sizes, ($breakpoint + 1))
            $baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + .00001}
            $baseline-push:  #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + .00001)}

            font-size: #{$fontsize / nth($sizes, ($breakpoint + 1))}rem
            margin-bottom: #{$baseline-push}rem
            padding-top: #{$baseline-shift}rem
        @else if $in-scale == true
            $rootsize: nth($sizes, ($breakpoint + 1))
            $get-scale: map-get($modular-scale, scale-#{$breakpoint})
            $get-size:  map-get($get-scale, $fontsize)
            $baseline-shift: #{($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + .00001}
            $baseline-push:  #{$below - (($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + .00001)}

            font-size: #{$get-size / nth($sizes, ($breakpoint + 1))}rem
            margin-bottom: #{$baseline-push}rem
            padding-top: #{$baseline-shift}rem
        @else
            @warn "#{$fontsize} is not a valid scale variable"
    @else if $breakpoint == all
        @if $font-value == number
            $rootsize: nth($sizes, 1)
            $baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + .00001}
            $baseline-push:  #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + .00001)}

            font-size: #{$fontsize / nth($sizes, 1)}rem
            margin-bottom: #{$baseline-push}rem
            padding-top: #{$baseline-shift}rem

            @for $i from 2 through $breakpoints-limit
                $rootsize: nth($sizes, $i)
                $baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + .00001}
                $baseline-push:  #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + .00001)}

                @media screen and (min-width: nth($points, $i) / 16 * 1em )
                    font-size: #{$fontsize / nth($sizes, $i)}rem
                    margin-bottom: #{$baseline-push}rem
                    padding-top: #{$baseline-shift}rem
        @else if $in-scale == true
            $rootsize: nth($sizes, 1)
            $get-scale: map-get($modular-scale, scale-0)
            $get-size:  map-get($get-scale, $fontsize)
            $baseline-shift: #{($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + .00001}
            $baseline-push:  #{$below - (($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + .00001)}

            font-size: #{$get-size / nth($sizes, 1)}rem
            margin-bottom: #{$baseline-push}rem
            padding-top: #{$baseline-shift}rem

            @for $i from 2 through $breakpoints-limit
                $rootsize: nth($sizes, $i)
                $get-scale: map-get($modular-scale, scale-#{$i - 1})
                $get-size:  map-get($get-scale, $fontsize)
                $baseline-shift: #{($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + .00001}
                $baseline-push:  #{$below - (($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + .00001)}

                @media screen and (min-width: nth($points, $i) / 16 * 1em )
                    font-size: #{$get-size / nth($sizes, $i)}rem
                    margin-bottom: #{$baseline-push}rem
                    padding-top: #{$baseline-shift}rem
        @else
            @warn "#{$fontsize} is not a valid scale variable"
    @else
        @warn "#{$breakpoint} is not valid to use as a breakpoint"
