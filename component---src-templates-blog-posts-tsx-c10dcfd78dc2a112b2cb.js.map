{"version":3,"file":"component---src-templates-blog-posts-tsx-c10dcfd78dc2a112b2cb.js","mappings":"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","sources":["webpack://laniewski-me/./node_modules/change-case/dist/index.js","webpack://laniewski-me/./gatsby/helpers/mapKeywordToSlug.mjs","webpack://laniewski-me/./gatsby/helpers/mapSlugToImageName.mjs","webpack://laniewski-me/./src/components/PostExcerpt/PostAuthors.tsx","webpack://laniewski-me/./src/components/PostExcerpt/PostTimeToRead.tsx","webpack://laniewski-me/./src/components/PostExcerpt/index.module.scss","webpack://laniewski-me/./src/components/PostExcerpt/PostKeywords.tsx","webpack://laniewski-me/./src/components/PostExcerpt/index.tsx","webpack://laniewski-me/./src/components/Keyword/index.module.scss","webpack://laniewski-me/./src/components/Keyword/index.tsx","webpack://laniewski-me/./src/hooks/useKeywords.tsx","webpack://laniewski-me/./src/templates/blog-posts.tsx"],"sourcesContent":["// Regexps involved with splitting words in various case formats.\nconst SPLIT_LOWER_UPPER_RE = /([\\p{Ll}\\d])(\\p{Lu})/gu;\nconst SPLIT_UPPER_UPPER_RE = /(\\p{Lu})([\\p{Lu}][\\p{Ll}])/gu;\n// Used to iterate over the initial split result and separate numbers.\nconst SPLIT_SEPARATE_NUMBER_RE = /(\\d)\\p{Ll}|(\\p{L})\\d/u;\n// Regexp involved with stripping non-word characters from the result.\nconst DEFAULT_STRIP_REGEXP = /[^\\p{L}\\d]+/giu;\n// The replacement value for splits.\nconst SPLIT_REPLACE_VALUE = \"$1\\0$2\";\n// The default characters to keep after transforming case.\nconst DEFAULT_PREFIX_SUFFIX_CHARACTERS = \"\";\n/**\n * Split any cased input strings into an array of words.\n */\nexport function split(value) {\n    let result = value.trim();\n    result = result\n        .replace(SPLIT_LOWER_UPPER_RE, SPLIT_REPLACE_VALUE)\n        .replace(SPLIT_UPPER_UPPER_RE, SPLIT_REPLACE_VALUE);\n    result = result.replace(DEFAULT_STRIP_REGEXP, \"\\0\");\n    let start = 0;\n    let end = result.length;\n    // Trim the delimiter from around the output string.\n    while (result.charAt(start) === \"\\0\")\n        start++;\n    if (start === end)\n        return [];\n    while (result.charAt(end - 1) === \"\\0\")\n        end--;\n    return result.slice(start, end).split(/\\0/g);\n}\n/**\n * Split the input string into an array of words, separating numbers.\n */\nexport function splitSeparateNumbers(value) {\n    const words = split(value);\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const match = SPLIT_SEPARATE_NUMBER_RE.exec(word);\n        if (match) {\n            const offset = match.index + (match[1] ?? match[2]).length;\n            words.splice(i, 1, word.slice(0, offset), word.slice(offset));\n        }\n    }\n    return words;\n}\n/**\n * Convert a string to space separated lower case (`foo bar`).\n */\nexport function noCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    return (prefix +\n        words.map(lowerFactory(options?.locale)).join(options?.delimiter ?? \" \") +\n        suffix);\n}\n/**\n * Convert a string to camel case (`fooBar`).\n */\nexport function camelCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = options?.mergeAmbiguousCharacters\n        ? capitalCaseTransformFactory(lower, upper)\n        : pascalCaseTransformFactory(lower, upper);\n    return (prefix +\n        words\n            .map((word, index) => {\n            if (index === 0)\n                return lower(word);\n            return transform(word, index);\n        })\n            .join(options?.delimiter ?? \"\") +\n        suffix);\n}\n/**\n * Convert a string to pascal case (`FooBar`).\n */\nexport function pascalCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = options?.mergeAmbiguousCharacters\n        ? capitalCaseTransformFactory(lower, upper)\n        : pascalCaseTransformFactory(lower, upper);\n    return prefix + words.map(transform).join(options?.delimiter ?? \"\") + suffix;\n}\n/**\n * Convert a string to pascal snake case (`Foo_Bar`).\n */\nexport function pascalSnakeCase(input, options) {\n    return capitalCase(input, { delimiter: \"_\", ...options });\n}\n/**\n * Convert a string to capital case (`Foo Bar`).\n */\nexport function capitalCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    return (prefix +\n        words\n            .map(capitalCaseTransformFactory(lower, upper))\n            .join(options?.delimiter ?? \" \") +\n        suffix);\n}\n/**\n * Convert a string to constant case (`FOO_BAR`).\n */\nexport function constantCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    return (prefix +\n        words.map(upperFactory(options?.locale)).join(options?.delimiter ?? \"_\") +\n        suffix);\n}\n/**\n * Convert a string to dot case (`foo.bar`).\n */\nexport function dotCase(input, options) {\n    return noCase(input, { delimiter: \".\", ...options });\n}\n/**\n * Convert a string to kebab case (`foo-bar`).\n */\nexport function kebabCase(input, options) {\n    return noCase(input, { delimiter: \"-\", ...options });\n}\n/**\n * Convert a string to path case (`foo/bar`).\n */\nexport function pathCase(input, options) {\n    return noCase(input, { delimiter: \"/\", ...options });\n}\n/**\n * Convert a string to path case (`Foo bar`).\n */\nexport function sentenceCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = capitalCaseTransformFactory(lower, upper);\n    return (prefix +\n        words\n            .map((word, index) => {\n            if (index === 0)\n                return transform(word);\n            return lower(word);\n        })\n            .join(options?.delimiter ?? \" \") +\n        suffix);\n}\n/**\n * Convert a string to snake case (`foo_bar`).\n */\nexport function snakeCase(input, options) {\n    return noCase(input, { delimiter: \"_\", ...options });\n}\n/**\n * Convert a string to header case (`Foo-Bar`).\n */\nexport function trainCase(input, options) {\n    return capitalCase(input, { delimiter: \"-\", ...options });\n}\nfunction lowerFactory(locale) {\n    return locale === false\n        ? (input) => input.toLowerCase()\n        : (input) => input.toLocaleLowerCase(locale);\n}\nfunction upperFactory(locale) {\n    return locale === false\n        ? (input) => input.toUpperCase()\n        : (input) => input.toLocaleUpperCase(locale);\n}\nfunction capitalCaseTransformFactory(lower, upper) {\n    return (word) => `${upper(word[0])}${lower(word.slice(1))}`;\n}\nfunction pascalCaseTransformFactory(lower, upper) {\n    return (word, index) => {\n        const char0 = word[0];\n        const initial = index > 0 && char0 >= \"0\" && char0 <= \"9\" ? \"_\" + char0 : upper(char0);\n        return initial + lower(word.slice(1));\n    };\n}\nfunction splitPrefixSuffix(input, options = {}) {\n    const splitFn = options.split ?? (options.separateNumbers ? splitSeparateNumbers : split);\n    const prefixCharacters = options.prefixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;\n    const suffixCharacters = options.suffixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;\n    let prefixIndex = 0;\n    let suffixIndex = input.length;\n    while (prefixIndex < input.length) {\n        const char = input.charAt(prefixIndex);\n        if (!prefixCharacters.includes(char))\n            break;\n        prefixIndex++;\n    }\n    while (suffixIndex > prefixIndex) {\n        const index = suffixIndex - 1;\n        const char = input.charAt(index);\n        if (!suffixCharacters.includes(char))\n            break;\n        suffixIndex = index;\n    }\n    return [\n        input.slice(0, prefixIndex),\n        splitFn(input.slice(prefixIndex, suffixIndex)),\n        input.slice(suffixIndex),\n    ];\n}\n//# sourceMappingURL=index.js.map","import * as changeCase from \"change-case\";\n\nexport function mapKeywordToSlug(category) {\n  return changeCase.kebabCase(category.trim().toLowerCase());\n}\n","export function mapSlugToImageName(slug) {\n  return slug.replace(\"/blog/\", \"\").replace(/\\/$/, \"\").replace(\"/\", \"-\");\n}\n","import * as React from \"react\";\n\ninterface PostAuthorsProps extends React.HTMLAttributes<HTMLSpanElement> {\n  data: string[];\n}\n\nexport function PostAuthors({ data, ...props }: PostAuthorsProps) {\n  return (\n    <span {...props}>\n      {\"By \"}\n      {data.map((author, index) => (\n        <React.Fragment key={author}>\n          <span\n            itemScope\n            itemProp=\"author\"\n            itemType=\"https://schema.org/Person\"\n          >\n            <span itemProp=\"name\">{author}</span>\n          </span>\n\n          {index < data.length - 1 ? \" and \" : \"\"}\n        </React.Fragment>\n      ))}\n    </span>\n  );\n}\n","import * as React from \"react\";\n\ninterface PostTimeToReadProps\n  extends React.TimeHTMLAttributes<HTMLTimeElement> {\n  value: number;\n}\n\nexport function PostTimeToRead({ value, ...props }: PostTimeToReadProps) {\n  // Assuming it's in minutes - hopefully I won't write articles that take hours\n  // to read:\n  const timeToReadRounded = Math.ceil(value);\n  const timeToReadMeta = `PT${timeToReadRounded}M`;\n\n  return (\n    <time {...props} itemProp=\"timeRequired\" dateTime={timeToReadMeta}>\n      {timeToReadRounded} min read\n    </time>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport var postExcerpt__content = \"index-module--post-excerpt__content--78477\";\nexport var postExcerpt__info = \"index-module--post-excerpt__info--f519a\";\nexport var postExcerpt__keyword = \"index-module--post-excerpt__keyword--a0c11\";\nexport var postExcerpt__title = \"index-module--post-excerpt__title--fd1d0\";\nexport var postExcerpt__wrapper = \"index-module--post-excerpt__wrapper--e5c60\";","import * as React from \"react\";\n\nimport { Link } from \"gatsby\";\n\nimport { mapKeywordToSlug } from \"../../../gatsby/helpers/mapKeywordToSlug.mjs\";\n\ninterface PostKeywordsProps\n  extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  data: string[];\n}\n\nexport function PostKeywords({ data, ...props }: PostKeywordsProps) {\n  return data.map((keyword, index) => (\n    <React.Fragment key={keyword}>\n      <Link\n        {...props}\n        to={`/posts/${mapKeywordToSlug(keyword)}/`}\n        title={`Category: ${keyword}`}\n      >\n        {keyword}\n      </Link>\n      {index !== data.length - 1 ? \", \" : null}\n    </React.Fragment>\n  ));\n}\n","import * as css from \"./index.module.scss\";\n\nimport * as React from \"react\";\n\nimport { Link, graphql, useStaticQuery } from \"gatsby\";\n\nimport { PostAuthors } from \"./PostAuthors\";\nimport { PostKeywords } from \"./PostKeywords\";\nimport { PostTimeToRead } from \"./PostTimeToRead\";\n\nimport { mapSlugToImageName } from \"../../../gatsby/helpers/mapSlugToImageName.mjs\";\n\ninterface Props {\n  as?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n  link: string;\n  title: string;\n  datePublished: string;\n  datePublishedMeta: string;\n  dateModifiedMeta: string;\n  content: string;\n  keywords: string[];\n  language: string;\n  wordCount: number;\n  timeToRead: number;\n  authors?: string[];\n}\n\ninterface SiteQuery {\n  site: {\n    siteMetadata: {\n      siteUrl: string;\n    };\n  };\n}\n\nexport function PostExcerpt({\n  as = \"h2\",\n  link,\n  title,\n  datePublished,\n  datePublishedMeta,\n  dateModifiedMeta,\n  authors,\n  content,\n  language,\n  keywords,\n  wordCount,\n  timeToRead,\n}: Props) {\n  const data = useStaticQuery<SiteQuery>(graphql`\n    query {\n      site {\n        siteMetadata {\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  const siteUrl = data.site.siteMetadata.siteUrl;\n  const thumbnailUrl = `${siteUrl}/thumbnails/${mapSlugToImageName(link)}.png`;\n\n  const HeadingWrapper = (\n    props: React.DetailedHTMLProps<\n      React.HTMLAttributes<HTMLElement>,\n      HTMLElement\n    >,\n  ) => React.createElement(as, props);\n\n  return (\n    <article\n      itemScope\n      itemType=\"http://schema.org/Article\"\n      className={css.postExcerpt__wrapper}\n      lang={language}\n    >\n      <meta itemProp=\"image\" content={thumbnailUrl} />\n      <meta itemProp=\"dateModified\" content={dateModifiedMeta} />\n      <meta itemProp=\"wordCount\" content={`${wordCount}`} />\n\n      <header>\n        <p className={css.postExcerpt__info}>\n          <PostAuthors data={authors} className=\"visually-hidden\" />\n\n          <time dateTime={datePublishedMeta} itemProp=\"datePublished\">\n            {datePublished}\n          </time>\n\n          <span aria-hidden>{\" • \"}</span>\n          <PostTimeToRead value={timeToRead} />\n\n          <span aria-hidden>{\" • \"}</span>\n          <PostKeywords data={keywords} className={css.postExcerpt__keyword} />\n        </p>\n\n        <HeadingWrapper className={css.postExcerpt__title}>\n          <Link to={link} itemProp=\"url\" rel=\"bookmark\">\n            <span itemProp=\"headline\">{title}</span>\n          </Link>\n        </HeadingWrapper>\n      </header>\n\n      <p\n        dangerouslySetInnerHTML={{ __html: content }}\n        itemProp=\"description\"\n        className={css.postExcerpt__content}\n      />\n    </article>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport var keyword = \"index-module--keyword--3eada\";\nexport var keyword__active = \"index-module--keyword__active--a72cc\";","import * as css from \"./index.module.scss\";\n\nimport { Link, GatsbyLinkProps } from \"gatsby\";\n\n// https://github.com/gatsbyjs/gatsby/issues/16682\nexport function Keyword<TState>({\n  children,\n  ...props\n}: Omit<GatsbyLinkProps<TState>, \"ref\">) {\n  return (\n    <Link<TState>\n      className={css.keyword}\n      activeClassName={css.keyword__active}\n      title={`Topic: ${children}`}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n}\n","import * as React from \"react\";\n\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ninterface KeywordsDataQuery {\n  allMdx: {\n    nodes: Array<{\n      frontmatter: {\n        keywords: string[];\n      };\n    }>;\n  };\n}\n\nfunction normalizeKeyword(keyword: string) {\n  return keyword.toLowerCase();\n}\n\nconst KEYWORDS_TO_HIDE = [\n  normalizeKeyword(\"Blockchain\"),\n  normalizeKeyword(\"Cryptocurrency\"),\n];\n\nconst KEYWORDS_ORDER = {\n  [normalizeKeyword(\"JavaScript\")]: 0,\n  [normalizeKeyword(\"TypeScript\")]: 1,\n  [normalizeKeyword(\"React\")]: 2,\n  [normalizeKeyword(\"React Native\")]: 3,\n};\n\nexport function useKeywords() {\n  const query = useStaticQuery<KeywordsDataQuery>(graphql`\n    query KeywordsData {\n      allMdx {\n        nodes {\n          frontmatter {\n            keywords\n          }\n        }\n      }\n    }\n  `);\n\n  const uniqueSortedKeywords = React.useMemo(() => {\n    const KEYWORDS_WITH_ORDER = Object.entries(KEYWORDS_ORDER).length;\n\n    return query.allMdx.nodes\n      .flatMap((node) => node.frontmatter.keywords)\n      .reduce<Array<{ quantity: number; name: string }>>((acc, value) => {\n        const dupeIndex = acc.findIndex((accItem) => accItem.name === value);\n\n        if (dupeIndex === -1) {\n          acc.push({ quantity: 1, name: value });\n        } else {\n          acc[dupeIndex].quantity++;\n        }\n\n        return acc;\n      }, [])\n      .filter(\n        (keyword) => !KEYWORDS_TO_HIDE.includes(normalizeKeyword(keyword.name)),\n      )\n      .sort((a, b) => b.quantity - a.quantity)\n      .sort(\n        (a, b) =>\n          (KEYWORDS_ORDER[normalizeKeyword(a.name)] ?? KEYWORDS_WITH_ORDER) -\n          (KEYWORDS_ORDER[normalizeKeyword(b.name)] ?? KEYWORDS_WITH_ORDER),\n      );\n  }, [query.allMdx.nodes]);\n\n  return uniqueSortedKeywords;\n}\n","import \"./blog-posts.scss\";\n\nimport { HeadProps, PageProps, graphql } from \"gatsby\";\n\nimport { mapKeywordToSlug } from \"../../gatsby/helpers/mapKeywordToSlug.mjs\";\n\nimport { BlogPost } from \"../../gatsby/types/queries\";\n\nimport { Content } from \"../components/Content\";\nimport { Keyword } from \"../components/Keyword\";\nimport { Layout } from \"../components/Layout\";\nimport { PostExcerpt } from \"../components/PostExcerpt\";\nimport { SEO } from \"../components/SEO\";\nimport { useKeywords } from \"../hooks/useKeywords\";\n\ninterface DataType {\n  site: {\n    siteMetadata: {\n      siteUrl: string;\n    };\n  };\n}\n\ninterface PageContextType {\n  data: BlogPost[];\n  keyword?: string;\n}\n\nexport default function BlogPostsTemplate({\n  pageContext,\n}: PageProps<DataType, PageContextType>) {\n  const keywords = useKeywords();\n\n  const pagePosts = pageContext.data;\n  const pageKeyword = pageContext.keyword;\n\n  return (\n    <Layout>\n      <Content>\n        <h1 className=\"heading visually-hidden\">\n          {pageKeyword\n            ? `Articles about ${pageKeyword}`\n            : \"Most Recent Articles\"}\n        </h1>\n\n        <ul className=\"keywords\">\n          <li>\n            <Keyword to=\"/posts/\">All</Keyword>\n          </li>\n\n          {keywords.map((keyword) => (\n            <li key={keyword.name}>\n              <Keyword\n                to={`/posts/${mapKeywordToSlug(keyword.name)}/`}\n                title={`${keyword.name} category contains ${\n                  keyword.quantity === 1\n                    ? \"1 post\"\n                    : `${keyword.quantity} posts`\n                }`}\n              >\n                {keyword.name}\n              </Keyword>\n            </li>\n          ))}\n        </ul>\n\n        <ol className=\"list\">\n          {pagePosts.map((post) => (\n            <li key={post.fields.slug}>\n              <PostExcerpt\n                link={post.fields.slug}\n                wordCount={post.fields.timeToRead.words}\n                timeToRead={post.fields.timeToRead?.minutes}\n                title={post.frontmatter.title || post.fields.slug}\n                datePublished={post.frontmatter.datePublished}\n                datePublishedMeta={post.frontmatter.datePublishedMeta}\n                dateModifiedMeta={post.frontmatter.dateUpdatedMeta}\n                authors={post.frontmatter.authors}\n                content={post.frontmatter.description || post.excerpt}\n                language={post.frontmatter.language}\n                keywords={post.frontmatter.keywords}\n              />\n            </li>\n          ))}\n        </ol>\n      </Content>\n    </Layout>\n  );\n}\n\nexport function Head({\n  data,\n  pageContext,\n  location,\n}: HeadProps<DataType, PageContextType>) {\n  const pageKeyword = pageContext.keyword;\n  const siteUrl = data.site.siteMetadata.siteUrl;\n  const slug = location.pathname;\n\n  return (\n    <SEO\n      url={`${siteUrl}${slug}`}\n      title={\n        pageKeyword\n          ? `${pageKeyword} posts by Bartosz Łaniewski`\n          : \"Blog by Bartosz Łaniewski\"\n      }\n      description={\n        pageKeyword\n          ? `Explore my latest posts, updates, and practical stories about ${pageKeyword} for developers`\n          : \"Explore my latest posts, updates, and practical stories about software engineering for developers\"\n      }\n    />\n  );\n}\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`;\n"],"names":["SPLIT_LOWER_UPPER_RE","SPLIT_UPPER_UPPER_RE","SPLIT_SEPARATE_NUMBER_RE","DEFAULT_STRIP_REGEXP","SPLIT_REPLACE_VALUE","DEFAULT_PREFIX_SUFFIX_CHARACTERS","split","value","result","trim","replace","start","end","length","charAt","slice","splitSeparateNumbers","words","i","word","match","exec","offset","index","splice","noCase","input","options","prefix","suffix","splitPrefixSuffix","map","lowerFactory","locale","join","delimiter","toLowerCase","toLocaleLowerCase","splitFn","separateNumbers","prefixCharacters","suffixCharacters","prefixIndex","suffixIndex","char","includes","mapKeywordToSlug","category","mapSlugToImageName","slug","PostAuthors","_ref","data","props","_jsxs","children","author","React","_jsx","itemScope","itemProp","itemType","PostTimeToRead","timeToReadRounded","Math","ceil","timeToReadMeta","dateTime","postExcerpt__content","postExcerpt__info","postExcerpt__keyword","postExcerpt__title","postExcerpt__wrapper","PostKeywords","keyword","Link","to","title","PostExcerpt","as","link","datePublished","datePublishedMeta","dateModifiedMeta","authors","content","language","keywords","wordCount","timeToRead","thumbnailUrl","useStaticQuery","site","siteMetadata","siteUrl","HeadingWrapper","className","css","lang","rel","dangerouslySetInnerHTML","__html","keyword__active","Keyword","activeClassName","normalizeKeyword","KEYWORDS_TO_HIDE","KEYWORDS_ORDER","BlogPostsTemplate","pageContext","query","uniqueSortedKeywords","KEYWORDS_WITH_ORDER","Object","entries","allMdx","nodes","flatMap","node","frontmatter","reduce","acc","dupeIndex","findIndex","accItem","name","push","quantity","filter","sort","a","b","_KEYWORDS_ORDER$norma","_KEYWORDS_ORDER$norma2","useKeywords","pagePosts","pageKeyword","Layout","Content","post","_post$fields$timeToRe","fields","minutes","dateUpdatedMeta","description","excerpt","Head","_ref2","location","pathname","SEO","url"],"sourceRoot":""}